
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;*******************************************************************************
                        ;                              PROYECTO FINAL                                  *
                        ;                                RADAR 623                                     *
                        ;*******************************************************************************
                        ;                                                                              *
                        ;       UNIVERSIDAD DE COSTA RICA                                              *
                        ;       FECHA 09/12/19                                                         *
                        ;       AUTOR: YEISON RODRIGUEZ PACHECO B56074                                 *
                        ;       COREREO: yeisonrodriguezpacheco@gmail.com                              *
                        ;       PROFESOR: GEOVANNY DELGADO.                                            *
                        ;                                                                              *
                        ; Descripcion: Este proyecto consiste en un producto que se encarga de calcu-  *
                        ; lar la velocidad a la que se despliega un carro (al pasar por encima de dos  *
                        ; sensores), y respectivamente mostrarla en una pantalla cuando el conductor   *
                        ; se encuentre a 100 metros de la pantalla.                                    *
                        ; Este producto permite configurar una velocidad maxima, en caso de que el con-*
                        ; ductor vaya mas rapido que dicha velocidad, se encenderan unos leds de alarma*
                        ; que serviran de aviso para que el chofer reduzca la velocidad.               *
                                                           
                        ; Debido a que es un prototipo, los sensores que detectan el carro son acciona-*
                        ; dos con los botones ph3 y ph0.                                               *
                        
                        ; El sistema tiene 3 modos de funcionamiento:
                        
                        
                        ; Modo libre: En este modo el sistema simplemente est√° esperando y no hace nada
                        ; mas que mostrar el nombre del producto. Para este modo se debe tener ph7 ON
                        ; y PH6 OFF. En este modo se encendera el LED PB3.
                        
                        ; A continuacion tenemos una ilustracion del modo:
                        ;______________________________________________________________________________
                        ;                 C0  C1  C2                                                   *
                        ;                 PA0 PA1 PA2                                                  *
                        ;                  |   |   |            PH7     PH6                            *
                        ;                -------------        ------   ------                          *
                        ;                |   |   |   |        ||||||   |    |                          *
                        ;     PA4, R0 -  | 1 | 2 | 3 |        ||||||   |    |                          *
                        ;                -------------        |    |   ||||||                          *
                        ;                |   |   |   |        |    |   ||||||                          *
                        ;     PA5, R1 -  | 4 | 5 | 6 |        ------   ------                          *
                        ;                -------------                                                 *
                        ;                |   |   |   |                                                 *
                        ;     PA6, R2 -  | 7 | 8 | 9 |                                                 *
                        ;                -------------                                                 *
                        ;                |   |   |   |                                                 *
                        ;     PA7, R3 -  | B | 0 | E |                                                 *
                        ;                -------------                                                 *
                        ;                                                                              *
                        ;                   PB2         PB1         PB0                                *
                        ;                  ----        ----        ----                                *
                        ;                (||||||)    (      )    (      )                              *
                        ;                  ----        ----        ----                                *
                        ;                 LIBRE        MED.        CONF                                *
                        ;                                                                              *
                        ;______________________________________________________________________________
                        
                        
                        ; Modo Medicion: En este Modo de funcionamiento el sistema esta esperando que 
                        ; un carro pase por el primer sensor (ph3), al pasar por este se pone ne la LCD
                        ; el mensaje (CALCULANDO), y cuando se presiona ph0 se calcula la velocidad del 
                        ; vehiculo. Pero no es desplegada hasta que el vehiculo este a 100 metros de la
                        ; misma. En este modo se enciende el led pb1.
                        
                        ; A continuacion tenemos una ilustracion del modo:
                        ;______________________________________________________________________________
                        ;                 C0  C1  C2                                                   *
                        ;                 PA0 PA1 PA2                                                  *
                        ;                  |   |   |            PH7     PH6                            *
                        ;                -------------        ------   ------                          *
                        ;                |   |   |   |        ||||||   ||||||                          *
                        ;     PA4, R0 -  | 1 | 2 | 3 |        ||||||   ||||||                          *
                        ;                -------------        |    |   |    |                          *
                        ;                |   |   |   |        |    |   |    |                          *
                        ;     PA5, R1 -  | 4 | 5 | 6 |        ------   ------                          *
                        ;                -------------                                                 *
                        ;                |   |   |   |                                                 *
                        ;     PA6, R2 -  | 7 | 8 | 9 |                                                 *
                        ;                -------------                                                 *
                        ;                |   |   |   |                                                 *
                        ;     PA7, R3 -  | B | 0 | E |                                                 *
                        ;                -------------                                                 *
                        ;                                                                              *
                        ;                   PB2         PB1         PB0                                *
                        ;                  ----        ----        ----                                *
                        ;                (      )    (||||||)    (      )                              *
                        ;                  ----        ----        ----                                *
                        ;                 LIBRE        MED.        CONF                                *
                        ;______________________________________________________________________________
                        
                        
                        
                        ; Modo Configuracion:  En este modo el sistema esta esperando para ser configu-
                        ; rado con una velocidad maxima, para esto se tiene el teclado del producto 
                        ; con el cual se pueden ingresar numeros de 45 a 90 KM/H. El led PB0 estara
                        ; encendido en este modo
                        
                        ; A continuacion tenemos una ilustracion del modo:
                        ;______________________________________________________________________________
                        ;                                                                              *
                        ;                 C0  C1  C2                                                   *
                        ;                 PA0 PA1 PA2                                                  *
                        ;                  |   |   |            PH7     PH6                            *
                        ;                -------------        ------   ------                          *
                        ;                |   |   |   |        |    |   |    |                          *
                        ;     PA4, R0 -  | 1 | 2 | 3 |        |    |   |    |                          *
                        ;                -------------        ||||||   ||||||                          *
                        ;                |   |   |   |        ||||||   ||||||                          *
                        ;     PA5, R1 -  | 4 | 5 | 6 |        ------   ------                          *
                        ;                -------------                                                 *
                        ;                |   |   |   |                                                 *
                        ;     PA6, R2 -  | 7 | 8 | 9 |                                                 *
                        ;                -------------                                                 *
                        ;                |   |   |   |                                                 *
                        ;     PA7, R3 -  | B | 0 | E |                                                 *
                        ;                -------------                                                 *
                        ;                                                                              *
                        ;                   PB2         PB1         PB0                                *
                        ;                  ----        ----        ----                                *
                        ;                (      )    (      )    (||||||)                              *
                        ;                  ----        ----        ----                                *
                        ;                 LIBRE        MED.        CONF                                *
                        ;______________________________________________________________________________
                        
                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                        DECLARACION DE ETIQUETAS                              *
                        ;*******************************************************************************
                        
                        
                        ;-------------------------------------------------------------------------------
00ff                    EOM:     EQU $FF
                        
                        ; Descripcion: Es utilizado como simbolo de fin de mensaje para todos los mensa-
                        ; jes enviados a la pantalla LCD.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------------------------------------------------------
                        #include registers.inc
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0        ; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE        equ        $0        ; register base
1000                    DATASTART equ        $1000        ; Start of data memory
2000                    DATAEND  equ        $2000        ; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ        $2000        ; Start of program memory (might be ROM)
3bff                    PREND        equ        $3BFF        ; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar        equ        $EE84        ; Implemented in emulator
ee86                    Putchar equ        $EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ        $EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00        ; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $3E00        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $400        ; Start of program memory
                        PREND        equ        $FFF        ; End of program memory
                        
                        VECTORTABLE equ $3E00        ; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $4000        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $8000        ; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed.
                        PREND        equ        $EF7F        ; End of program memory
                        
                        VECTORTABLE equ $EF80        ; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ        DATASTART ; For compatibility
2000                    RAMEND equ        DATAEND
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:                equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:        equ REGBASE+$1a ;part id high
001b                    PARTIDL:        equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:        equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:        equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:                equ REGBASE+$30 ;program page register
                        
0032                    PORTK:                equ REGBASE+$32 ;port k data
0033                    DDRK:                equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT:       equ REGBASE+$86 ;adc status register hi
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:        equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:                equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:                equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:                equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:                equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:                equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:                equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:        equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:        equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:        equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:                equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:        equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:        equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:                equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:        equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:        equ REGBASE+$100 ;flash clock divider
0101                    FSEC:                equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:                equ REGBASE+$103 ;flash configuration register
0104                    FPROT:                equ REGBASE+$104 ;flash protection register
0105                    FSTAT:                equ REGBASE+$105 ;flash status register
0106                    FCMD:                equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:        equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:                equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:                equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:                equ REGBASE+$115 ;eeprom status register
0116                    ECMD:                equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:        equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:        equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:        equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:        equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:        equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:        equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:        equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:        equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:        equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:        equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:        equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:        equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:        equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:        equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:        equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:        equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:        equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:        equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:        equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:        equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:        equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:        equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:        equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:        equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:        equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:        equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:        equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:        equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:        equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:        equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:        equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:        equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:        equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:        equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:        equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:        equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:        equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:        equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:        equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:        equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:        equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:        equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:        equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:        equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:        equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:        equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:        equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:        equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:        equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:        equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:        equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:        equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:        equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:        equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:        equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:        equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:        equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:        equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:        equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:        equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:        equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:        equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:        equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:        equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:        equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:        equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:        equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:        equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:        equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:        equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:        equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:        equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:        equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:        equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:        equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:        equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:        equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:        equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:        equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:        equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:        equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:        equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:        equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:        equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:        equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:        equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:        equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:        equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:        equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:        equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:        equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:        equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:        equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:        equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:        equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:        equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:        equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:        equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:        equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:        equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:        equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:        equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:        equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:        equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:        equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:        equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:        equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:        equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:        equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:        equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:        equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:        equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:        equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:        equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:        equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:        equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:        equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:        equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:        equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:        equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:        equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:        equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:        equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:        equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:        equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:        equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:        equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:        equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:        equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:                equ REGBASE+$240 ;portt data register
0241                    PTIT:                equ REGBASE+$241 ;portt input register
0242                    DDRT:                equ REGBASE+$242 ;portt direction register
0243                    RDRT:                equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:                equ REGBASE+$244 ;portt pull device enable
0245                    PPST:                equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:                equ REGBASE+$248 ;ports data register
0249                    PTIS:                equ REGBASE+$249 ;ports input register
024a                    DDRS:                equ REGBASE+$24a ;ports direction register
024b                    RDRS:                equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:                equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:                equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:                equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:                equ REGBASE+$250 ;portm data register
0251                    PTIM:                equ REGBASE+$251 ;portm input register
0252                    DDRM:                equ REGBASE+$252 ;portm direction register
0253                    RDRM:                equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:                equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:                equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:                equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:                equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:                equ REGBASE+$258 ;portp data register
0259                    PTIP:                equ REGBASE+$259 ;portp input register
025a                    DDRP:                equ REGBASE+$25a ;portp direction register
025b                    RDRP:                equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:                equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:                equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:                equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:                equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:                equ REGBASE+$260 ;porth data register
0261                    PTIH:                equ REGBASE+$261 ;porth input register
0262                    DDRH:                equ REGBASE+$262 ;porth direction register
0263                    RDRH:                equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:                equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:                equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:                equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:                equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:                equ REGBASE+$268 ;portj data register
0269                    PTIJ:                equ REGBASE+$269 ;portj input register
026a                    DDRJ:                equ REGBASE+$26a ;portj direction register
026b                    RDRJ:                equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:                equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:                equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:                equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:                equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:        equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:        equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:        equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:        equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:        equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:        equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:        equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:        equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:        equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:        equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:        equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:        equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:        equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:        equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:        equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:        equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:        equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:        equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:        equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:        equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:        equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:        equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:        equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:        equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:        equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:        equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:        equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:        equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:        equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:        equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:        equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:        equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        ;_______________________________________________________________________________
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                        DECLARACION ESTRUCTURAS DE DATOS                      *
                        ;*******************************************************************************
                        
                        
1000                            ORG $1000
                        ;-------------------------------- $1000 a $1001 --------------------------------
1000                    BANDERAS:       ds 2        ; Banderas del sistema:
                        
                        ; Descripcion: Se almacena en un WORD todas las banderas del sistema, veremos
                        ;                que la distribucion es de la siguiente forma:
                        
                        ; --------- $1000 ----------
                        ; X : X : X : MOD_LIB_ACTUAL : MOD_CONF_ACTUAL : MOD_MED_ACTUAL : PH3_EN : PH0_EN
                        
                        ; Ahora se muestra la definicion de la funcionalidad de estas banderas:
                        ;  MOD_MED_ACTUAL: Indica con un 1 si se debe actualizar el LCD de modo MEDICION
                        ;  MOD_CONF_ACTUAL: Indica con un 1 si se debe actualizar el LCD de modo CONFIG
                        ;  MOD_LIB_ACTUAL: Indica con un 1 si se debe actualizar el LCD de modo LIBRE
                        ;  PH3_EN: Se usa para habilitar ph3, debe estar en 1 al inicio
                        ;  PH0_EN: Se usa para habilitar PH0, debe estar en 0 al inicio
                        
                        
                        ; --------- $1001 ----------
                        ; COMANDO_DATO : X : CALC_TICKS : ALERTA : PANT_FLAG : ARRAY_OK : TCL_LEIDA : TCL_LISTA
                        
                        ; Ahora se muestra la definicion de la funcionalidad de estas banderas:
                        ;   CALC_TICKS: Se utiliza en la subrutina PANT_CTRL
                        ;   ALERTA: Bandera que esta en 1 cuando se debe poner el patron de LEDS de alerta
                        ;   PANT_FLAG: Se utiliza en la subrutina PANT_CTRL para saber cuando desplegar en pant
                        ;   ARRAY_OK: Bandera que esta en 1 cuando el array del teclado esta listo
                        ;   TCL_LEIDA: Bandera que se pone en 1 cuando se lee una tecla del teclado
                        ;   TCL_LISTA: Se pone en 1 cuando la tecla es soltada (esta lista)
                        ;   COMANDO_DATO: Esta bandera es 0 si se envia un comando, 1 si se envian datos
                        
                        ;_______________________________________________________________________________
                        
                        ;------------------------------------ $1002 ------------------------------------
1002                    V_LIM:          ds 1
                        
                        ; Descripcion: Variable tipo byte que almacena la velocidad limite del vehicu-
                        ; lo.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1003 ------------------------------------
1003 02                 MAX_TCL:        db $02
                        
                        ; Descripcion: Indica la cantidad maxima de teclas a ser ingresadas en el tecla-
                        ; do.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1004 ------------------------------------
1004                    TECLA:          ds 1
                        
                        ; Descripcion: Es utilizada para almacenar una tecla justo cuando se presiona
                        ; un boton del teclado.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1005 ------------------------------------
1005                    TECLA_IN:       ds 1
                        
                        ; Descripcion: Es utilizada para comparar con TECLA y ver si la tecla presionada
                        ; era valida
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1006 ------------------------------------
1006                    CONT_REB:       ds 1
                        
                        ; Descripcion: Es utilizada para controlar rebotes de botones. Es decrementado
                        ; por la interrupcion RTI
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1007 ------------------------------------
1007                    CONT_TCL:       ds 1        ;Contador de teclas que han sido escritas, usada en FORMAR_ARRAY
                        
                        ; Descripcion: Es utilizada para contar la cantidad de teclas ya guardadas del
                        ; teclado.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1008 ------------------------------------
1008                    PATRON:         ds 1
                        
                        ; Descripcion: Utilizada para contar hasta 5 en MUX_TECLADO, con el fin de tener
                        ; una correcta obtencion de la tecla presionada en el teclado.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1009 a 100A ---------------------------------
1009 ff ff              NUM_ARRAY:      db $ff,$ff             ;Guarda los numeros ingresados en el teclado
                        
                        ; Descripcion: Tabla de tamano WORD usada para almacenar las teclas presionadas
                        ; en el teclado matricial.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $100B ------------------------------------
100b                    BRILLO:         ds 1        ; Brillo de los leds, se sube de 5 en 5. Va de 0 a 100 es la variable K
                        
                        ; Descripcion: Utilizada para controlar el brillo de los LEDS y los display de
                        ; 7 segmentos. Va de 0 a 100. Es modificada por el ATD
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $100C ------------------------------------
100c                    POT:            ds 1        ; Es el valor leido en el potenciometro.
                        
                        ; Descripcion: Esta variable almacena el valor leido en el potenciometro.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $100D a $100E --------------------------------
100d                    TICK_EN:        ds 2
                        
                        ; Descripcion: Esta variable tipo WORD almacena una cantidad de TICKS calculados
                        ; por el programador. Cuando estos ticks llegan a 0 (TCNT los decrementa) se pone
                        ; la bandera PANT_FLAG en 1, con lo cual se enciende la pantalla de 7 segmentos.
                        ; Solo es valida en modo medicion.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $100F a $1010 --------------------------------
100f                    TICK_DIS:       ds 2
                        
                        ; Descripcion: Esta variable tipo WORD almacena una cantidad de TICKS calculados
                        ; por el programador. Cuando estos ticks llegan a 0 (TCNT los decrementa) se pone
                        ; la bandera PANT_FLAG en 0, con lo cual se apaga  la pantalla de 7 segmentos.
                        ; Solo es valida en modo medicion.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1011 ------------------------------------
1011                    VELOC:          ds 1
                        
                        ; Descripcion: Esta variable almacena la velocidad en KM/H a la que va el vehi-
                        ; culo
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1012 ------------------------------------
1012                    TICK_VEL:       ds 1
                        
                        ; Descripcion: Esta variable es utilizada para contar ticks cada vez que llega
                        ; la interrupcion TCNT. Con estos ticks se calcula la velocidad en KM/H
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1013 ------------------------------------
1013                    BIN1:           ds 1
                        
                        ; Descripcion: Variable que almacena un valor en binario con el fin de que se
                        ; despliegue en la pantalla de 7 segmentos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1014 ------------------------------------
1014                    BIN2:           ds 1
                        
                        ; Descripcion: Variable que almacena un valor en binario con el fin de que se
                        ; despliegue en la pantalla de 7 segmentos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1015 ------------------------------------
1015                    BCD1:           ds 1
                        
                        ; Descripcion: Almacena en los primeros 4 bits un numero en BCD, de igual forma
                        ; en los ultimos 4 bits. Estos valores seran desplegados en la pantalla de 7 seg
                        ; No se debe utilizar esta variable para mandar datos a los display, debe utili-
                        ; zarse BIN1 o BIN2
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1016 ------------------------------------
1016                    BCD2:           ds 1
                        
                        ; Descripcion: Almacena en los primeros 4 bits un numero en BCD, de igual forma
                        ; en los ultimos 4 bits. Estos valores seran desplegados en la pantalla de 7 seg
                        ; No se debe utilizar esta variable para mandar datos a los display, debe utili-
                        ; zarse BIN1 o BIN2
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1017 ------------------------------------
1017                    BCD_L:          ds 1
                        
                        ; Descripcion: Utilizada para calcular numeros de binario a BCD.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1018 ------------------------------------
1018                    BCD_H:          ds 1
                        
                        ; Descripcion: Utilizada para calcular numeros de binario a BCD.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1019 ------------------------------------
1019                    DISP1:          ds 1        ; Los 4 valores de los display que se escriben en PORTB
                        
                        ; Descripcion: Contiene la codificacion de 7 segmentos de un numero que sera
                        ; desplegado en los disply de 7 segmentos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $101A ------------------------------------
101a                    DISP2:          ds 1
                        
                        ; Descripcion: Contiene la codificacion de 7 segmentos de un numero que sera
                        ; desplegado en los disply de 7 segmentos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $101B ------------------------------------
101b                    DISP3:          ds 1
                        
                        ; Descripcion: Contiene la codificacion de 7 segmentos de un numero que sera
                        ; desplegado en los disply de 7 segmentos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $101C ------------------------------------
101c                    DISP4:          ds 1
                        
                        ; Descripcion: Contiene la codificacion de 7 segmentos de un numero que sera
                        ; desplegado en los disply de 7 segmentos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $101D ------------------------------------
101d                    LEDS:           ds 1
                        
                        ; Descripcion: Esta variable controla cuales LEDS estan encendidos y cuales no.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $101E ------------------------------------
101e                    CONT_DIG:       ds 1
                        
                        ; Descripcion: Esta variable es utilizada por la interrupcion OC4 con el fin de
                        ; controlar cual de los display se va a encender, debido a que se encienden por
                        ; multiplexacion de pantalla.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $101F ------------------------------------
101f                    CONT_TICKS:     ds 1
                        
                        ; Descripcion: Cuenta ticks en la subrutina output compare, con el fin de contro
                        ; lar el ciclo de trabajo de cada una de los display de 7 segmentos, y asi bajar
                        ; les o subirles el brillo segun corresponda.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1020 ------------------------------------
1020                    DT:             ds 1
                        
                        ; Descripcion: Es utilizada para calcular el ciclo de trabajo en la interrupcion
                        ; OC4, con el fin de controlar el tiempo de encendido de los display de 7 seg.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1021 a $1022 --------------------------------
1021                    CONT_7SEG:      ds 2
                        
                        ; Descripcion: Contador controlado por OC4 con el fin de que cada 1/10 s se
                        ; llame a BCD_7SEG para que actualice los valores de la pantalla de 7 seg.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1023 a $1024 --------------------------------
1023                    CONT_200:       ds 2
                        
                        ; Descripcion: Contador controlado por la interrupcion OC4 con el fin de que
                        ; cada 1/5 s se escriba el registro ATD0CTRL5 para iniciar un ciclo de conver-
                        ; sion del ATD. Tambien para llamar a Patron Leds
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1025 ------------------------------------
1025                    CONT_DELAY:     ds 1
                        
                        ; Descripcion: Variable utilizada para que se decremente en la subrutina OC4, con
                        ; el fin de que se pueda contar delay de tiempos para controlar la pantalla LCD.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1026 ------------------------------------
1026 64                 D2mS:           dB 100
                        
                        ; Descripcion: Utilizado para generar un delay de 2 mili segundos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1027 ------------------------------------
1027 0d                 D260uS:         dB 13
                        
                        ; Descripcion: Utilizado para generar un delay de 260 u segundos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1028 ------------------------------------
1028 03                 D60uS:          dB 3
                        
                        ; Descripcion: Utilizado para generar un delay de 60 u segundos.
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $1029 ------------------------------------
1029                    CLEAR_LCD:      ds 1
                        
                        ; Descripcion: Utilizada para el control de la pantalla LCD
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $102A ------------------------------------
102a 80                 ADD_L1:         dB $80
                        
                        ; Descripcion: Utilizada para el control de la pantalla LCD
                        ;_______________________________________________________________________________
                        
                        
                        ;------------------------------------ $102B ------------------------------------
102b c0                 ADD_L2:         dB $C0
                        
                        ; Descripcion: Utilizada para el control de la pantalla LCD
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1030 a $103B --------------------------------
1030                            ORG $1030
1030 01 02 03 04 05 06  TECLAS:         db $01,$02,$03,$04,$05,$06,$07,$08,$09,$0B,$0,$0E
     07 08 09 0b 00 0e
                        
                        ; Descripcion: Tabla que contiene los valores de las teclas presionadas en el
                        ; teclado matricial
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1040 a $104B --------------------------------
1040                            ORG $1040
1040 3f 06 5b 4f 66 6d  SEGMENT:       dB $3f,$06,$5b,$4f,$66,$6d,$7d,$07,$7f,$6f,$40,$00
     7d 07 7f 6f 40 00
                        
                        ; Descripcion: Tabla que contiene las traducciones de BCD a 7 segmentos de los
                        ; numeros del 0 al 9. Ademas de que el numero A de la tabla es utilizado para
                        ; encender dos guiones y el numero B para apagar los display.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1050 a $1055 --------------------------------
1050                            ORG $1050
1050 04 28 28 06 0c     iniDsp:         db $04,$28,$28,$06,%00001100 ;disp on, cursor off, no blinkin
1055 ff                                 db EOM
                        
                        ; Descripcion: Tabla de comandos utilizados para inicializar la pantalla LCD.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1060 a $1071 --------------------------------
1060                            ORG $1060
1060 20 20 4d 4f 44 4f  Msj_config_1:    fcc "  MODO CONFIG.  "
     20 43 4f 4e 46 49
     47 2e 20 20
1070 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado en el modo configuracion, es desplegado en el
                        ; LCD
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1072 a $1083 --------------------------------
1071 20 56 45 4c 4f 43  Msj_config_2:    fcc " VELOC. LIMITE  "
     2e 20 4c 49 4d 49
     54 45 20 20
1081 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado en el modo Config para indicar la velocidad
                        ; Limite a la que puede ir un auto.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1084 a $1095 --------------------------------
1082 20 20 52 41 44 41  Msj_libre_1:    fcc "  RADAR   623   "
     52 20 20 20 36 32
     33 20 20 20
1092 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado en el modo Libre que indica el nombre del pro-
                        ; ducto.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $1096 a $10A7 --------------------------------
1093 20 20 4d 4f 44 4f  Msj_libre_2:    fcc "  MODO LIBRE    "
     20 4c 49 42 52 45
     20 20 20 20
10a3 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado en el modo Libre que indica que se esta en el
                        ; modo libre.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $10A8 a $10B9 --------------------------------
10a4 20 4d 4f 44 4f 20  Msj_medicion_1:    fcc " MODO MEDICION  "
     4d 45 44 49 43 49
     4f 4e 20 20
10b4 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado en el modo Medicion que indica el modo.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $10BA a $10CB --------------------------------
10b5 20 20 43 41 4c 43  Msj_medicion_calculando_2:    fcc "  CALCULANDO... "
     55 4c 41 4e 44 4f
     2e 2e 2e 20
10c5 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado cuando se esta calculando la velocidad.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $10CC a $10DD --------------------------------
10c6 20 20 45 53 50 45  Msj_medicion_esperando_2:    fcc "  ESPERANDO...  "
     52 41 4e 44 4f 2e
     2e 2e 20 20
10d6 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado cuando se esta esperando a que pase un auto.
                        ;_______________________________________________________________________________
                        
                        
                        ;-------------------------------- $10DE a $10EF --------------------------------
10d7 53 55 20 56 45 4c  Msj_medicion_su_vel_vel_lim_2:    fcc "SU VEL. VEL.LIM "
     2e 20 56 45 4c 2e
     4c 49 4d 20
10e7 ff                         db EOM
                                
                        ; Descripcion: Mensaje utilizado para mostrarle al auto la velocidad a la que
                        ; va y la velocidad limite.
                        ;_______________________________________________________________________________
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                       DECLARACION VECTORES INTERRUPCION
                        ;*******************************************************************************
                                ; Vector interrupcion relocalizado del output compare canal 4
3e66                            ORG $3e66
3e66 21 82                      dw OC4_ISR
                        
                                ; Vector interrupcion relocalizado del real time interrupt
3e70                            ORG $3e70
3e70 21 08                      dw RTI_ISR
                        
                                ; Vector de interrupcion relocalizado de key wakeups
3e4c                            ORG $3e4c
3e4c 21 14                      dw CALCULAR
                        
                                ; Vector de interrupcion relocalizado ATD
3e52                            ORG $3E52
3e52 22 2e                      dw ATD_ISR
                        
                                ; Vector de interrupcion relozalizado del Timmer Overflow
3e5e                            ORG $3E5E
3e5e 22 55                      dw TCNT_ISR
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;-------------------------------------------------------------------------------
                        ;--------------------------------------MAIN-------------------------------------
                        ;-------------------------------------------------------------------------------
                        ;*******************************************************************************
                        
2000                            ORG $2000
                        
                        
                        ;-_-_-_-_-_-_-_-_-_-_-_-_ INICIALIZACION DE HARDWARE: -_-_-_-_-_-_-_-_-_-_-_-_-_
                        
                        
                        ;____________________________________ ATD ______________________________________
                        
2000 18 0b c2 00 82             MOVB #$C2,ATD0CTL2      ; Activa el ATD y las interrupciones
2005 86 f0                      LDAA #240
2007                    INICIAR_ATD:
2007 04 30 fd                   dbne A,INICIAR_ATD            ;retardo convertidor
200a 18 0b 30 00 83             MOVB #%00110000,ATD0CTL3      ; 6 conversiones por canal
200f 18 0b b7 00 84             MOVB #%10110111,ATD0CTL4      ; Define frecuencia en 500KHz y 4 periodos del itempo de muestreo
                        ;_______________________________________________________________________________
                        
                        
                        ;_________________________ Puerto A para teclado _______________________________
                        
2014 18 0b 01 00 0c             MOVB #$01,PUCR       ;Resistencias pull up
2019 18 0b f0 00 02             MOVB #$F0,DDRA      ;Puerto A, parte alta salidas, parte baja entradas
                        ;_______________________________________________________________________________
                        
                        
                        ;_____________________________________ RTI _____________________________________
                        
201e 18 0b 23 00 3b             movb #$23,RTICTL        ; M = 2 n = 3
2023 4c 38 80                   bset CRGINT,#$80        ; activa rti
                        ;_______________________________________________________________________________
                        
                        
                        ;___________________________ OC4 y Timmer Overflow _____________________________
                        
2026 4c 46 80                   BSET TSCR1,$80 ; TEN = 1 , Habilitando modulo timers
2029 4c 4d 03                   BSET TSCR2, $03 ; Preescalador = 8
202c 4c 4c 10                   BSET TIE,$10    ; Habilitando interrupcion output compare canal 4
202f 4c 40 10                   BSET TIOS,$10   ; Pone como salida canal 4
                        
2032 dc 44                      LDD TCNT
2034 c3 00 3c                   ADDD #60
2037 5c 58                      STD TC4
                        ;_______________________________________________________________________________
                        
                        
                        ;______________________ INICIALIZACION DE DISPLAY 7 SEG ________________________
                        
2039 18 0b ff 00 03             MOVB #$FF,DDRB            ; Todas salidas puerto B (segentos de display)
203e 18 0b 0f 02 5a             MOVB #$0F,DDRP            ; 4 salidas puerto P (activan cada display)
                        ;_______________________________________________________________________________
                        
                        
                        
                        ;______________________ INICIALIZACION DE J PARA LEDS __________________________
                        
2043 1c 02 6a 02                bset DDRJ,$02             ; Salida puerto j
                        ;_______________________________________________________________________________
                        
                        
                        
                        ;__________________ INICIALIZACION DE K PARA PANTALLA LED ______________________
                        
2047 18 0b ff 00 33             MOVB #$FF,DDRK  ; Puerto K como salidas
                        ;_______________________________________________________________________________
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;-_-_-_-_-_-_-_-_-_-_-_-_ INICIALIZACION DE VARIABLES: -_-_-_-_-_-_-_-_-_-_-_-_-
                        
204c cf 3b ff                   LDS #$3BFF
204f 10 ef                      CLI                     ; Activando interrupciones
2051 18 0b ff 10 04             MOVB #$FF,TECLA
2056 18 0b ff 10 05             MOVB #$FF,TECLA_IN
205b 79 10 06                   CLR CONT_REB
205e 18 03 00 00 10 00          MOVW #0,BANDERAS
2064 1c 10 00 1e                BSET BANDERAS,$1E  ; Activando: MOD_MED_ACTUAL,MOD_CONFIG_ACTUAL,MOD_LIB_ACTUAL,PH3_EN.
2068 79 10 07                   CLR CONT_TCL
206b 79 10 02                   CLR V_LIM
206e 79 10 11                   CLR VELOC
2071 79 10 1e                   CLR CONT_DIG
2074 79 10 1f                   CLR CONT_TICKS
2077 18 03 00 00 10 21          MOVW #0,CONT_7SEG
                        
207d 16 25 8b                   jsr LCD         ; Inicializar LCD
                        ;_______________________________________________________________________________
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                                ; X : X : X : MOD_LIB_ACTUAL : MOD_CONF_ACTUAL : MOD_MED_ACTUAL : PH3_EN : PH0_EN :
                        
                        ;-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ Main -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
                        
2080                    Main:
2080 f7 10 02                   TST V_LIM               ; Verificando que la velocida sea valida
2083 27 28                      BEQ mod_conf       ; Si no es asi, solo se puede estar en modo Libre o Config
2085 1e 02 61 c0 51             BRSET PTIH,$C0,mod_med  ; Salta a modo medicion si es el modo elegido
                                
                                ; Este segmento inhabilita y borra todas los respectivos componentes que
                                ; podrian causar problemas al venir del modo medicion.
208a 1d 10 00 03                BCLR BANDERAS,$03     ; Desactiva habilitacion de botones ph3 y ph0
208e 79 10 11                   CLR VELOC               ; Borra velocidad
2091 18 03 00 00 10 0d          MOVW #0,TICK_EN         ; Borrando ticks habilitadores de pantalla
2097 18 03 00 00 10 0f          MOVW #0,TICK_DIS        ; Borrando ticks deshabilitadores de pantalla
209d 1d 10 01 38                BCLR BANDERAS+1,$38       ; Desactiva ALERTA y PANT_FLAG Y CALC_TICKS
                                
20a1 1f 02 61 c0 07             BRCLR PTIH,$C0,mod_conf ; Verificando si es modo config
20a6 16 23 45                   JSR LIBRE
20a9 18 20 ff d3                LBRA Main               ; Vuelve al main
                        
20ad                    mod_conf:
20ad 1f 10 00 08 22             BRCLR BANDERAS,$08,mod_conf_no_act_LCD
20b2 1c 10 00 14                BSET BANDERAS,$14      ; Arreglando banderas de cambios de modo
20b6 1d 10 00 08                BCLR BANDERAS,$08
                        
20ba ce 10 60                   LDX #Msj_config_1      ; Cargando LCD con mensaje de modo configuracion
20bd cd 10 71                   LDY #Msj_config_2
20c0 16 26 00                   JSR CARGAR_LCD
                                
20c3 18 0b 01 10 1d             MOVB #$01,LEDS          ; Arreglando los LEDS de modo
20c8 18 0b bb 10 14             MOVB #$BB,BIN2          ; Para borrar BIN2 en modo config
                                
20cd 4d 4d 80                   BCLR TSCR2,$80          ; Desactivando interrupciones TO y Key Wake Ups
20d0 1d 02 66 09                BCLR PIEH,$09
                                
20d4                    mod_conf_no_act_LCD:
20d4 16 23 73                   JSR MODO_CONFIG
20d7 18 20 ff a5                LBRA Main               ; Vuelve al main
                                
20db                    mod_med:
20db 1f 10 00 04 21             BRCLR BANDERAS,$04,mod_med_no_act_LCD
20e0 1c 10 00 18                BSET BANDERAS,$18      ; Arreglando banderas de cambios de modo
20e4 1d 10 00 04                BCLR BANDERAS,$04
                                
20e8 ce 10 a4                   LDX #Msj_medicion_1      ; Cargando LCD con mensaje de modo medicion
20eb cd 10 c6                   LDY #Msj_medicion_esperando_2
20ee 16 26 00                   JSR CARGAR_LCD
                                
20f1 18 0b 02 10 1d             MOVB #$02,LEDS          ; Arreglando los LEDS de modo
20f6 1c 10 00 02                BSET BANDERAS,$02     ; Activa boton ph3
                                
20fa 4c 4d 80                   bset TSCR2,$80          ; Activando interrupciones
20fd 1c 02 66 09                BSET PIEH,$09
                                
2101                    mod_med_no_act_LCD:
2101 16 22 8c                   JSR MODO_MEDICION
2104 18 20 ff 78                LBRA Main               ; Vuelve al main
                        
                        ;_______________________________________________________________________________
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;-------------------------------------------------------------------------------
                        ;-------------------------------INTERRUPCIONES----------------------------------
                        ;-------------------------------------------------------------------------------
                        ;*******************************************************************************
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION RTI_ISR
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta interrupcion se encarga de decrementar la variable CONT_REB en 1
                        ; cada 1 ms aproximadamente, si CONT_REB es cero la subrutina no hace nada.
                        
                        ; Parametros de entrada:
                        ;       CONT_REB: Lo revisa a ver si es 0, sino lo decrementa
                        ;
                        ; Parametros de salida:
                        ;       CONT_REB: Lo devuelve en 0 o decrementado por 1
                        ;*******************************************************************************
                        
                        
2108                    RTI_ISR:        ; Teclado
                        
2108 4c 37 80                           BSET CRGFLG,#$80
210b f7 10 06                           TST CONT_REB      ; Si contador de rebotes es 0, no hace nada
210e 27 03                              BEQ FIN_RTI_ISR_cont_reb
2110 73 10 06                           DEC CONT_REB      ; decrementando contador de rebotes
2113                    FIN_RTI_ISR_cont_reb:                  ; Timer cuenta (modo run)
                        
2113 0b                                 RTI
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION CALCULAR
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta interrupcion se divide en dos subrutinas:
                        ;
                        ;
                        ;***********************************
                        ;*        INTERRUPCION PTH0        *
                        ;***********************************
                        ; Descripcion: Esta interrupcion se encarga de tomar la variable TICK_VEL y re-
                        ; alizar el calculo de la velocida del vehiculo en KM/H que es almacenado en la
                        ; variable VELOC. Si la velocidad es mayor a 255 se almacena 255 en VELOC.
                        ; Esta interrupcion habilita nuevamente el boton ph3.
                        
                        ; Parametros de entrada:
                        ;       PTH3: Bandera que indica con un 1 que se viene de haber presionado ph3
                        ;       TICK_VEL: Recibe la cantidad de ticks que han pasado. Existe una relacion
                        ;       directa entre cada tick y el tiempo. Cada tick equivale a 0.0218 segundos
                        ;       CONT_REB: Se utilia para controlar los rebotes de los botones
                        ; Parametros de salida:
                        ;       VELOC: Velocidad en KM/H
                        
                        
                        ;***********************************
                        ;*        INTERRUPCION PTH3        *
                        ;***********************************
                        ; Descripcion: Esta interrupcion se encarga iniciar la cuenta de TICK_VEL en 0
                        ; ademas de activar el boton ph0 por medio de la bandera PH0 en 1. Esta subru-
                        ; tina tambien actualiza la pantalla LCD con el mensaje "CALCULANDO".
                        
                        ; Parametros de entrada:
                        ;       CONT_REB: Se utilia para controlar los rebotes de los botones
                        
                        ; Parametros de salida:
                        ;       PH0: Bandera que se pone en 1 en esta subrutina. Activa el boton ph0.
                        
                        
                        ;*******************************************************************************
                        
                        ;Descripcion: Esta interrupcion se divide en 2 subrunitas:
                        ; PTH0:
                        
                        ; PTH3:
2114                    CALCULAR:
2114 1e 02 67 01 06                     BRSET PIFH,$01,PTH0
2119 1e 02 67 08 36                     BRSET PIFH,$08,PTH3
211e 0b                                 RTI
                        
211f                    PTH0:
211f 1f 10 00 01 2b             BRCLR BANDERAS,$01,PTH0_retornar ; Para saber si realmente se presiono antes PTH3
2124 1d 10 00 01                BCLR BANDERAS,$01 ; Desactivando boton ph0
2128 f7 10 06                   TST CONT_REB      ;Control de rebotes
212b 26 22                      BNE PTH0_retornar
212d 86 14                      LDAA #20          ; Para controlar rebotes
212f 7a 10 06                   STAA CONT_REB
2132 f6 10 12                   LDAB TICK_VEL      ; DIVISOR
2135 87                         CLRA
2136 b7 45                      TFR D,X
2138 cc 19 e0                   LDD #6624         ; Calculo de velocidad (ver hoja de calculo informe)
213b 18 10                      IDIV              ; Calculo de la velocidad
213d b7 54                      TFR X,D
213f 79 10 12                   CLR TICK_VEL
2142 97                         TSTA              ; Si queda algo en parte alta de A, es porque la velocidad es invalida
2143 26 05                      BNE PTH0_velocidad_invalida
2145 7b 10 11                   STAB VELOC         ;guardando velocidad que es valida
2148 20 05                      BRA PTH0_retornar
214a                    PTH0_velocidad_invalida:  ; Guardando velocidad invalida
214a 18 0b ff 10 11             MOVB #$FF,VELOC
214f                    PTH0_retornar:
214f 1c 02 67 01                BSET PIFH,$01     ; Desactivando bandera de interrupcion
2153 0b                         RTI
                        
                        
2154                    PTH3:
                        
2154 f7 10 06                   TST CONT_REB      ;Control de rebotes
2157 26 24                      BNE PTH3_retornar
2159 1f 10 00 02 1f             BRCLR BANDERAS,$02,PTH3_retornar
215e 1c 10 00 01                BSET BANDERAS,$01       ; Activando boton ph0
2162 1d 10 00 02                BCLR BANDERAS,$02       ; desActivando boton ph3
2166 86 14                      LDAA #20          ; Para controlar rebotes
2168 7a 10 06                   STAA CONT_REB
216b 79 10 12                   CLR TICK_VEL
216e ce 10 a4                   LDX #Msj_medicion_1   ; Cargando LCD
2171 cd 10 b5                   LDY #Msj_medicion_calculando_2
2174 1c 02 67 08                BSET PIFH,$08     ; Desactivando interrupcion
2178 10 ef                      CLI               ; activando interrupciones
217a 16 26 00                   JSR CARGAR_LCD
217d                    PTH3_retornar:
217d 1c 02 67 08                BSET PIFH,$08     ; Desactivando interrupcion
2181 0b                         RTI
                        
                        
                        
                        
                        
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION OC4_ISR
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta interrupcion da cada 20us, dentro de sus tareas esta:
                        
                        ; - Control del ciclo de encendido y apagado (multiplexacion) de los display
                        ;   de 7 segmentos.
                        ; - Llamar cada 100 ms a las subrutinas CONV_BIN_BCD y BCD_7SEG, con el fin
                        ;   de actualizar los valores en los display de 7 seg
                        ; - Iniciar cada 200ms la conversion analogica digital ademas de llamar la
                        ;   subrutina PATRON_LEDS que actualiza el patron de leds.
                        
                        ; Parametros de entrada:
                        ;       DISP1, DISP2, DISP3, DISP4: Cada uno de los display
                        ;       LEDS: Contiene los LEDS a desplegar
                        ;       BRILLO: Contiene el brillo de la pantalla
                        ; Parametros de salida: N/A
                        
                        ;*******************************************************************************
                        
2182                    OC4_ISR:
2182 4c 4e 10                   BSET TFLG1,$10                ; Borrando bandera interrupcion
2185 fc 10 21                   LDD CONT_7SEG                 ; Calculando si ya pasaron 100ms
2188 8c 13 88                   CPD #5000
218b 27 08                      BEQ OC4_ISR_llamar
218d c3 00 01                   ADDD #1                       ; sumando 1 a CONT_7SEG
2190 7c 10 21                   STD CONT_7SEG                 ; Guaradndolo
2193 20 0c                      BRA OC4_ISR_continuar3
2195                    OC4_ISR_llamar:                       ; Cada 100ms se actualizan los datos de los display
2195 18 03 00 00 10 21          MOVW #0,CONT_7SEG
219b 16 23 ef                   JSR CONV_BIN_BCD
219e 16 24 4a                   JSR BCD_7SEG
21a1                    OC4_ISR_continuar3:
21a1 ce 10 19                   LDX #DISP1
21a4 86 64                      LDAA #100                 ;Verificando si el contador de tics ya
21a6 b1 10 1f                   CMPA CONT_TICKS            ; llego a 100.
21a9 27 05                      BEQ OC4_ISR_tic_maximo
21ab 72 10 1f                   INC CONT_TICKS             ; Iincrementando contador de tics
21ae 20 3a                      BRA OC4_ISR_continuar1
21b0                    OC4_ISR_tic_maximo:               ; Se debe cambiar de display
21b0 79 10 1f                   CLR CONT_TICKS
21b3 72 10 1e                   INC CONT_DIG
21b6 f6 10 1e                   LDAB CONT_DIG
21b9 c1 05                      CMPB #5                   ; Si contador de digito se sale del rango se resetea
21bb 26 03                      BNE Continuar
21bd 79 10 1e                   clr CONT_DIG
21c0                    Continuar:
21c0 f6 10 1e                   LDAB CONT_DIG             ; Si el digito son los leds, se encienden
21c3 c1 04                      CMPB #4
21c5 27 0b                      BEQ encender_led
21c7 18 0d e5 00 01             MOVB B,X,PORTB                ; Mandando datos al display
21cc 1c 02 68 02                BSET PTJ,$02                  ; apagando leds
21d0 20 0a                      BRA continuar2
21d2                    encender_led:                        ; encendiendo leds
21d2 18 0c 10 1d 00 01          MOVB LEDS,PORTB
21d8 1d 02 68 02                BCLR PTJ,$02                 ;encendiendo leds
21dc                    continuar2:
21dc 86 f7                      LDAA #$F7                 ; Calculando cual display se debe encender
21de f6 10 1e                   LDAB CONT_DIG
21e1                    OC4_ISR_loop_1:
21e1 27 04                      BEQ OC4_ISR_fin_loop1
21e3 44                         LSRA                      ; Se desplaza el 0 para ver cual display se enciende
21e4 53                         DECB
21e5 20 fa                      BRA OC4_ISR_loop_1
21e7                    OC4_ISR_fin_loop1:
21e7 7a 02 58                   STAA PTP                  ; Guardando resultado obtenido
21ea                    OC4_ISR_continuar1:
21ea 86 64                      LDAA #100                 ; Calculando cuando apagar el display
21ec b0 10 0b                   SUBA BRILLO
21ef 7a 10 20                   STAA DT
21f2 b1 10 1f                   CMPA CONT_TICKS
21f5 26 09                      BNE OC4_ISR_continuar2
21f7 18 0b ff 02 58             MOVB #$FF,PTP             ; Se apaga el display
21fc 1c 02 68 02                BSET PTJ,$02              ; disable leds
2200                    OC4_ISR_continuar2
                                           ; Decrementando contador de delay si no es 0
2200 f7 10 25                   TST CONT_DELAY
2203 27 03                      BEQ OC4_ISR_continuar4
2205 73 10 25                   DEC CONT_DELAY
2208                    OC4_ISR_continuar4:
                        
2208 fc 10 23                   LDD CONT_200                ; Calculando si ya pasaron 100ms
220b 8c 27 10                   CPD #10000
220e 27 08                      BEQ OC4_ISR_llamar2
2210 c3 00 01                   ADDD #1                       ; sumando 1 a CONT_7SEG
2213 7c 10 23                   STD CONT_200                 ; Guaradndolo
2216 20 0e                      BRA OC4_ISR_retornar
2218                    OC4_ISR_llamar2:                       ; Cada 100ms se actualizan los datos de los display
2218 18 03 00 00 10 23          MOVW #0,CONT_200
221e 16 24 7a                   JSR PATRON_LEDS
2221 18 0b 87 00 85             MOVB #%10000111,ATD0CTL5
2226                    OC4_ISR_retornar:
2226 dc 44                      LDD TCNT                       ; Guardando en TC4 la siguiente interrupcion
2228 c3 00 3c                   ADDD #60
222b 5c 58                      STD TC4
222d 0b                         RTI
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION ATD_ISR
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de leer 6 valores guardados en los reg
                        ; del convertidor analogico a digital en el cual esta conectado el potenciometro
                        ; y hacer un promedio de los mismos que es guardado en la variable POT. Por
                        ; ultimo se calcula el valor de 0 a 100 (en intervalos de 5 en 5) del brillo
                        ; a ser mostrado en los display, este brillo es guardado en la variable BRILLO.
                        
                        
                        ; Parametros de entrada: N/A
                        ;
                        ; Parametros de salida: POT, BRILLO
                        
                        ;*******************************************************************************
                        
                        
222e                    ATD_ISR:
222e dc 90                      LDD ADR00H      ; Haciendo un promedio de los valores del CAD que esta
2230 d3 92                      ADDD ADR01H     ; leyendo el potenciometro
2232 d3 94                      ADDD ADR02H
2234 d3 96                      ADDD ADR03H
2236 d3 98                      ADDD ADR04H
2238 d3 9a                      ADDD ADR05H
                        
223a ce 00 06                   LDX #6          ; Calculando promedio entre los 6 datos
223d 18 10                      IDIV
223f b7 54                      TFR x,d         ; Pasando resultado a D
                        
2241 7b 10 0c                   STAB POT
                        
2244 86 14                      LDAA #20        ; Calculando el valor de brillo
2246 12                         MUL             ; 20 * POT
                        
2247 ce 00 ff                   LDX #255
224a 18 10                      IDIV            ; (20 * POT) / 255
224c b7 54                      TFR x,d         ; Pasando resultado a D
                        
224e 86 05                      LDAA #5         ; Calculando resultado de brillo en escala de 0 a 100
2250 12                         MUL             ;( (20 * POT) / 255 ) * 5
2251 7b 10 0b                   STAB BRILLO
                        
2254 0b                         RTI
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION TCNT_ISR
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta interrupcion se encarga de contar los ticks cada aprox 0.0218ms
                        ; incrementando TICK_VEL. Tambien controla el encendido y apagado de una bandera
                        ; llamada PANT_FLAG que controla el encendido y apagado de la pantalla de 7 SEG.
                        
                        
                        ; Parametros de entrada:
                        ;                       TICK_EN: Cantidad de veces que esta interrupcion debe
                        ;llegar para que se encienta la bandera PANT_FLAG.
                        ;                       TICK_DIS: Cantidad de veces que esta interrupcion debe
                        ;llegar para que se apague la bandera PANT_FLAG.
                        ;                       TICK_VEL: Se incrementa en 1 en cada interrupcion, cuando
                        ;llega a 255 ya no se cuenta mas
                        ; Parametros de salida: Pantflag: Bandera que si es 1 significa que se debe
                        ; encender la pantalla de 7 seg.
                        
                        ;*******************************************************************************
                        
2255                    TCNT_ISR:
2255 1f 10 00 01 0a             BRCLR BANDERAS,$01,TCNT_ISR_no_contar ; Si ph0 no esta activa, no cuenta.
225a 86 ff                      LDAA #$FF                               ; Si se va a rebasar, no cuenta mas.
225c b1 10 12                   CMPA TICK_VEL
225f 27 03                      BEQ TCNT_ISR_no_contar
2261 72 10 12                   INC TICK_VEL                            ; Cuenta un tick
2264                    TCNT_ISR_no_contar:
2264 fc 10 0d                   LDD TICK_EN     ; Verificando si TICK_EN llego a 0, sino lo decrementa
2267 27 08                      BEQ TCNT_ISR_set_pant_flag
2269 83 00 01                   SUBD #1
226c 7c 10 0d                   STD TICK_EN
226f 20 04                      BRA TCNT_ISR_continuar
2271                    TCNT_ISR_set_pant_flag:
2271 1c 10 01 08                BSET BANDERAS+1, $08      ; Pantflag = 1
2275                    TCNT_ISR_continuar:
2275 fc 10 0f                   LDD TICK_DIS     ; Verificando si TICK_EN llego a 0, sino lo decrementa
2278 27 08                      BEQ TCNT_ISR_clear_pant_flag
227a 83 00 01                   SUBD #1
227d 7c 10 0f                   STD TICK_DIS
2280 20 04                      BRA TCNT_ISR_retornar
2282                    TCNT_ISR_clear_pant_flag:
2282 1d 10 01 08                BCLR BANDERAS+1, $08      ; Pantflag = 0
2286                    TCNT_ISR_retornar:
2286 18 0b 80 00 4f             movb #$80,TFLG2  ; Borrando bandera interrupcion
228b 0b                         RTI
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;-------------------------------------------------------------------------------
                        ;---------------------------------SUBRUTINAS------------------------------------
                        ;-------------------------------------------------------------------------------
                        ;*******************************************************************************
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA MODO_MEDICION
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion Si la velocidad es 0 se ponen los display de 7 segmentos apagados
                        ; y  se termina la subrutina, en caso contrario se llama a PANT_CTRL para que
                        ; haga los calculos correspondientes con respecto a la velocidad calculada del
                        ; vehiculo.
                        ;
                        ; Parametros de entrada: Se recibe la velocidad en un byte de memoria llamado
                        ; VELOC.
                        ;
                        ; Parametros de salida: BIN1 y BIN2.
                        ;*******************************************************************************
                        
228c                    MODO_MEDICION:
228c f7 10 11                   TST VELOC                    ; Si velocidad es 0, termina
228f 27 04                      BEQ MODO_MEDICION_retornar
2291 16 22 9e                   JSR PANT_CTRL
2294 3d                         RTS
2295                    MODO_MEDICION_retornar:
2295 86 bb                      LDAA #$BB
2297 7a 10 13                   STAA BIN1
229a 7a 10 14                   STAA BIN2
229d 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA PANT_CTRL
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina es utilizada en el modo medicion para controlar
                        ; la temporizacion de todo el proceso de control de la pantalla LCD y 7 Seg
                        ; despues de haber presionado el boton ph0. Por lo que se hace el calculo de
                        ; cuanto tiempo falta para que llegue el auto a 100m de la pantalla y despliega
                        ; la velocidad del auto cuando esta a 100 metros. Cuando el auto pasa la panta-
                        ; lla apaga los display. Esta subrutina es llamada en la subrutina MODO_MEDICION
                        ;
                        ; Parametros de entrada: VELOC: Velocidad a la que va el vehiculo
                        ;                        V_LIM; Velocida limite del vehiculo
                        ;                        PANT_CTRL: Bandera que enciende la pantalla de 7 seg
                        ;
                        ; Parametros de salida: VELOC: Velocidad invalida al final del ciclo de la sub. $BB
                        ;		        TICK_EN: Carga el tiempo en que el carro este a 100m de la
                        ;                                pantalla.
                        ;                       TICK_DIS: Carga el tiempo en que el carro pase la pantalla.
                        ;                       ALERTA: Bandera que enciende leds de alerta si la veloci-
                        ;                               dad del carro es mayor a V_LIM
                        ;                       CALC_TICKS: Bandera que indica que ya se calcularon los 
                        ;                                   valores de TICK_EN y TICK_DIS.
                        ;*******************************************************************************
                        
229e                    PANT_CTRL:
229e 1d 02 66 09                BCLR PIEH,$09           ; Desactivando interrupcion PH0,PH3
22a2 b6 10 11                   LDAA VELOC                  ; Verificando si VELOC es valida
22a5 81 1e                      CMPA #30
22a7 25 38                      BLO PANT_CTRL_vel_no_valida
22a9 81 63                      CMPA #99
22ab 22 34                      BHI PANT_CTRL_vel_no_valida
22ad b1 10 02                   CMPA V_LIM              ; Verificando si es mayor a la velocidad maxima
22b0 23 04                      BLS PANT_CTRL_calcular_ticks
22b2 1c 10 01 10                BSET BANDERAS+1,$10  ; ALARMA <-- 1
22b6                    PANT_CTRL_calcular_ticks:
22b6 1e 10 01 20 3e             BRSET BANDERAS+1,$20,PANT_CTRL_control_pantalla  ; SI CALC_TICKS es 0 sigue
22bb f6 10 11                   LDAB VELOC      ; DIVISOR
22be 87                         CLRA
22bf b7 45                      TFR D,X
22c1 cc 40 5f                   LDD #16479         ; Calculo de tiempo (ver hoja de calculo informe)
22c4 18 10                      IDIV              ; Calculo de  tiempo
22c6 b7 54                      TFR X,D
22c8 7c 10 0d                   STD TICK_EN        ;guardando tiempo habilitacion
22cb f6 10 11                   LDAB VELOC      ; DIVISOR
22ce 87                         CLRA
22cf b7 45                      TFR D,X
22d1 cc 80 be                   LDD #32958         ; Calculo de tiempo (ver hoja de calculo informe)
22d4 18 10                      IDIV              ; Calculo de  tiempo
22d6 b7 54                      TFR X,D
22d8 7c 10 0f                   STD TICK_DIS        ;guardando tiempo habilitacion
22db 1c 10 01 20                BSET BANDERAS+1,$20  ; CALC_TICKS = 1, para que solo se haga una vez
22df 20 18                      BRA PANT_CTRL_control_pantalla
22e1                    PANT_CTRL_vel_no_valida:   ; Si la velocidad no es valida, para imrpimir guiones 2 seg
22e1 86 aa                      LDAA #$AA
22e3 b1 10 11                   CMPA VELOC
22e6 27 11                      BEQ PANT_CTRL_control_pantalla
22e8 18 03 00 01 10 0d          MOVW #$1,TICK_EN     ; Habilitando 2 segundos
22ee 18 03 00 5b 10 0f          MOVW #$5B,TICK_DIS
22f4 18 0b aa 10 11             MOVB #$AA,VELOC     ; Para no volver a entrar aqui
                        
22f9                    PANT_CTRL_control_pantalla: ; Demas logica de la pantalla
22f9 1f 10 01 08 1e             BRCLR BANDERAS+1,$08,PANT_CTRL_pant_encendida ; si pant_flh es 0 salta
22fe 86 bb                      LDAA #$BB                   ; Verificando si ya se imprimio la pantalla 1 vez
2300 b1 10 13                   CMPA BIN1
2303 27 01                      BEQ PANT_CTRL_pant_vel_encendida
2305 3d                         RTS
2306                    PANT_CTRL_pant_vel_encendida: ; Se pone la vel lim y la velocidad
2306 ce 10 a4                   LDX #Msj_medicion_1       ; Cargando LCD
2309 cd 10 d7                   LDY #Msj_medicion_su_vel_vel_lim_2
230c 16 26 00                   JSR CARGAR_LCD
230f 18 0c 10 02 10 13          MOVB V_LIM,BIN1       ; Cargando valores a displays
2315 18 0c 10 11 10 14          MOVB VELOC,BIN2
231b 3d                         RTS
                        
231c                    PANT_CTRL_pant_encendida:
231c 86 bb                      LDAA #$BB                   ; Verificando si ya se llego de PANT_FLH = 1
231e b1 10 13                   CMPA BIN1
2321 26 01                      BNE PANT_CTRL_ultimo_ciclo
2323 3d                         RTS
2324                    PANT_CTRL_ultimo_ciclo:
2324 ce 10 a4                   LDX #Msj_medicion_1       ; Cargando LCD
2327 cd 10 c6                   LDY #Msj_medicion_esperando_2
232a 16 26 00                   JSR CARGAR_LCD
232d 86 bb                      LDAA #$BB                ; Dejando variables listas por ser ultimo ciclo
232f 7a 10 13                   STAA BIN1
2332 7a 10 14                   STAA BIN2
2335 79 10 11                   CLR VELOC
2338 1c 02 66 09                BSET PIEH,$09           ; Activando interrupcion PH0,PH3
233c 1d 10 01 30                BCLR BANDERAS+1,$30       ; CALC_TICKS = 0 y ALERTA = 0
2340 1c 10 00 02                BSET BANDERAS,$02     ; Bandera que habilita ph3
2344                    PANT_CTRL_retornar:
2344 3d                         RTS
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA LIBRE
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina controla el modo libre, simplemente se encarga de
                        ; actualizar la pantalla LCD una unica vez cuando se llega a este modo. Tambien
                        ; en ese instante actualiza los LEDS, desactiva las interrupciones de TO y KWU y
                        ; apaga los display de 7 segmentos.
                        ;
                        ; Parametros de entrada: Bandera MOD_LIB_ACTUAL, si es 1 se actualiza el LCD
                        ;                        si es 0 ya no se actualiza.
                        ;
                        ; Parametros de salida: LEDS: Enciende el led correspondiente de modo libre
                        ;                       BIN1: Apaga los display en este modo poniendo $BB
                        ;                       BIN2: Apaga los display en este modo poniendo $BB
                        ;*******************************************************************************
                        
2345                    LIBRE:
2345 1e 10 00 10 01             BRSET BANDERAS,$10,mod_libre_actualizar_lcd
234a 3d                         RTS
234b                    mod_libre_actualizar_lcd:
                                
234b 1c 10 00 0c                BSET BANDERAS,$0C     ; Cargando banderas correspondientes de camb modo
234f 1d 10 00 10                BCLR BANDERAS,$10     ; Borrando bandera de este modo
                                
2353 ce 10 82                   LDX #Msj_libre_1       ; Cargando LCD
2356 cd 10 93                   LDY #Msj_libre_2
2359 16 26 00                   JSR CARGAR_LCD
                        
235c 18 0b 04 10 1d             MOVB #$04,LEDS          ; Cargando el led correspondiente
                                
2361 4d 4d 80                   BCLR TSCR2,$80          ; Desactivando interrupciones TO y Key Wake Ups
2364 1d 02 66 09                BCLR PIEH,$09
                                
2368 18 0b bb 10 13             MOVB #$BB,BIN1          ; Cargando 0s en displays
236d 18 0b bb 10 14             MOVB #$BB,BIN2
                                
2372 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA MODO_CONFIG
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de administrar el modo configuracion.
                        ; Su principal tarea es llamar a las subrutinas que controlan el teclado como
                        ; TAREA_TECLADO. Al recibir el valor leido en el teclado verifica si es valido,
                        ; de ser asi almacena este valor valido en V_LIM.
                        ;
                        ; Parametros de entrada: ARRAY_OK: Bandera que indica que ya hay una velocidad
                        ;                        ingresada en V_LIM por el teclado. En binario.
                        ;                        V_LIM: Contiene la velocidad ingresada por el usuario
                        ;                        en el teclado.
                        ;
                        ; Parametros de salida: BIN1: Envia la velocidad maxima a esta variable que es 
                        ;                       desplegada en los display de 7 segmentos.
                        ;*******************************************************************************
                        
                        
2373                    MODO_CONFIG:
2373 1e 10 01 04 0a             BRSET BANDERAS+1,$04,MODO_CONFIG_tcl_lista ;Verificando si Ya hay una tecla lista
2378 16 24 a6                   JSR TAREA_TECLADO                        ;Leyendo una tecla
237b 18 0c 10 02 10 13          MOVB V_LIM,BIN1                        ; Moviendo valor de V_lim a BIN1
2381 3d                         RTS
2382                    MODO_CONFIG_tcl_lista: ;Ya hay una tecla lista
2382 16 23 9f                   JSR BCD_BIN          ;Pasando de BCD a binario
2385 1d 10 01 04                BCLR BANDERAS+1,$04   ; Borrando array_ok
2389 b6 10 02                   LDAA V_LIM          ; Verificando si tecla es valida
238c 81 2d                      CMPA #45
238e 25 0b                      BLO MODO_CONFIG_tcl_no_valida
2390 81 5a                      CMPA #90
2392 22 07                      BHI MODO_CONFIG_tcl_no_valida
2394 18 0c 10 02 10 13          MOVB V_LIM,BIN1     ; Pasando el valor programado a BIN1
239a 3d                         RTS
239b                    MODO_CONFIG_tcl_no_valida:
239b 79 10 02                   CLR V_LIM           ; Valor no valido
239e 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA BCD_BIN
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de realizar la conversion de los nume-
                        ; ros leidos en el teclado matricial que estan en BCD y pasarlo a binario.
                        ; Ademas esta subrutina controla que los numeros enviados sigan el formato:
                        ; 03, 06, y no el formato 6, 3, porque genera problemas. El numero convertido
                        ; es guardado en V_LIM.
                        ;
                        ; Parametros de entrada: En la direccion NUM_ARRAY se envian los numeros a con-
                        ; vertir a binario. La cantidad de numeros esta dada por MAX_TCL.
                        ;
                        ; Parametros de salida: Guarda velocidad en binario en V_LIM
                        ;*******************************************************************************
                        
                        ;Descripcion: Esta subrutina se encarga de realizar la conversion de los numeros
                        ; leidos en el teclado a binario y guardarlo en CPROG.
239f                    BCD_BIN:
239f ce 10 09                   LDX #NUM_ARRAY
23a2 86 0a                      LDAA #10
23a4 e6 30                      LDAB 1,X+
23a6 12                         MUL             ; NUMERO MAS SIGNIFICATIVO MULTIPLICADO POR 10
23a7 a6 00                      LDAA 0,X
23a9 81 ff                      CMPA #$FF
23ab 27 05                      BEQ BCD_BIN_continuar ;Si solo se presiono una tecla, no guarda V_LIM
23ad eb 00                      ADDB 0,X         ; Sumando parte baja
23af 7b 10 02                   STAB V_LIM         ; Guardando valor binario en cprog
23b2                    BCD_BIN_continuar:      ; Borrando NUM_ARRAY para proximo ingreso del teclado
23b2 18 08 00 ff                MOVB #$FF,0,X
23b6 18 08 2f ff                MOVB #$FF,1,-X
23ba 3d                         RTS
                                
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA BIN_BCD
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de realizar la conversion de numeros
                        ; de binario a BCD. Solo realiza conversiones de numeros de 0 a 99
                        ;
                        ; Parametros de entrada: Se le debe pasar un numero en binario por el acumulador
                        ; A.
                        ;
                        ; Parametros de salida: Devuelve el resultado en la variable BCD_L.
                        ;*******************************************************************************
                        
                        ;Descripcion: Esta subrutina convierte un numero pasado como parametro por el acu-
                        ; mulador A en binario y devuelve su valor en BCD en la variable BCD_L. Utiliza
                        ; Como variables BCD_H y BCD_L
                        
23bb                    BIN_BCD:
23bb c6 07                      LDAB #7
23bd 79 10 17                   CLR BCD_L
23c0                    BIN_BCD_2_main_loop:
23c0 48                         LSLA
23c1 75 10 17                   ROL BCD_L
23c4 36                         PSHA
23c5 86 0f                      LDAA #$0F                ; Mascara de BCDX con 0F en A
23c7 b4 10 17                   ANDA BCD_L
23ca 81 05                      CMPA #5                  ; R1 mayor igual 5
23cc 25 02                      BLO BIN_BCD2_cont
23ce 8b 03                      ADDA #3
23d0                    BIN_BCD2_cont:
23d0 7a 10 18                   STAA BCD_H      ; UTILIZADO COMO VARIABLE TEMPORAL LOW
23d3 86 f0                      LDAA #$F0                ; Mascara de BCDX con F0 en A
23d5 b4 10 17                   ANDA BCD_L
23d8 81 50                      CMPA #$50
23da 25 02                      BLO BIN_BCD2_cont_2
23dc 8b 30                      ADDA #$30
23de                    BIN_BCD2_cont_2:
23de bb 10 18                   ADDA BCD_H      ; BCD_H = LOW
23e1 7a 10 17                   STAA BCD_L
23e4 32                         PULA
23e5 04 01 02                   DBEQ B, BIN_BCD2_fin
23e8 20 d6                      BRA BIN_BCD_2_main_loop
23ea                    BIN_BCD2_fin:              ; RETORNANDO
23ea 48                         LSLA
23eb 75 10 17                   ROL BCD_L
23ee 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA CONV_BIN_BCD
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de verificar si los numeros enviados
                        ; en BIN1 y BIN2 son $BB o $AA, de ser asi solamente guarda los valores de BIN1
                        ; y BIN2 en BCD1 y BCD2 respectivamente. En caso de que las variables contengan
                        ; otro valor, se llama a la subrutina BIN_BCD y se guardan los valores converti-
                        ; dos en BCD a BCD1 y BCD2.
                        ;
                        ; Parametros de entrada: Las variables BIN1 y BIN2 que contienen numeros en bi-
                        ; nario
                        ;
                        ; Parametros de salida: Devuelve el resultado de los numeros en BCD en las va-
                        ; riables BCD1 y BCD2 respectivamente. Por ejemplo el numero $0F en BIN1 y el 
                        ; numero $0a en BIN2 son devueltos como BCD1 = $15, BCD2 = $10
                        ;*******************************************************************************
                        
23ef                    CONV_BIN_BCD:
23ef b6 10 13                   LDAA BIN1                         ; Verificando si BIN1 es AA o BB
23f2 81 bb                      CMPA #$BB
23f4 27 18                      BEQ CONV_BIN_BCD_guardar_bin1
23f6 81 aa                      CMPA #$AA
23f8 27 14                      BEQ CONV_BIN_BCD_guardar_bin1
23fa 16 23 bb                   JSR BIN_BCD                       ; Calculando numero en BCD
23fd 1f 10 17 f0 02             BRCLR BCD_L,$F0,CONV_BIN_BCD_borrar_1_display ; Verificando si hay que apagar algun display
2402 20 12                      BRA CONV_BIN_BCD_guardar_bcd_l
2404                    CONV_BIN_BCD_borrar_1_display:      ; Poniendo B en el display que debe apagarse
2404 1c 10 17 b0                BSET BCD_L,%10110000
2408 1d 10 17 40                BCLR BCD_L,%01000000
240c 20 08                      BRA CONV_BIN_BCD_guardar_bcd_l
240e                    CONV_BIN_BCD_guardar_bin1:             ; Copia AA o BB en BCD1 segun corresponga
240e 18 0c 10 13 10 15          MOVB BIN1,BCD1
2414 20 06                      BRA CONV_BIN_BCD_analizar_bin2
2416                    CONV_BIN_BCD_guardar_bcd_l:           ;Guardando el dato en BCD1
2416 18 0c 10 17 10 15          MOVB BCD_L,BCD1
                        
241c                    CONV_BIN_BCD_analizar_bin2: ; Repite el proceso anterior con BIN2
241c b6 10 14                   LDAA BIN2                         ; Verificando si BIN1 es AA o BB
241f 81 bb                      CMPA #$BB
2421 27 18                      BEQ CONV_BIN_BCD_guardar_bin2
2423 81 aa                      CMPA #$AA
2425 27 14                      BEQ CONV_BIN_BCD_guardar_bin2
2427 16 23 bb                   JSR BIN_BCD                       ; Calculando numero en BCD
242a 1f 10 17 f0 02             BRCLR BCD_L,$F0,CONV_BIN_BCD_borrar_1_display2 ; Verificando si hay que apagar algun display
242f 20 12                      BRA CONV_BIN_BCD_guardar_bcd_2
2431                    CONV_BIN_BCD_borrar_1_display2:      ; Poniendo B en el display que debe apagarse
2431 1c 10 17 b0                BSET BCD_L,%10110000
2435 1d 10 17 40                BCLR BCD_L,%01000000
2439 20 08                      BRA CONV_BIN_BCD_guardar_bcd_2
243b                    CONV_BIN_BCD_guardar_bin2:             ; Copia AA o BB en BCD1 segun corresponga
243b 18 0c 10 14 10 16          MOVB BIN2,BCD2
2441 20 06                      BRA CONV_BIN_BCD_retornar
2443                    CONV_BIN_BCD_guardar_bcd_2:           ;Guardando el dato en BCD1
2443 18 0c 10 17 10 16          MOVB BCD_L,BCD2
2449                    CONV_BIN_BCD_retornar:
2449 3d                         RTS
                        
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA BCD_7SEG
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina toma los valores almacenados en BCD1 y BCD2 y los
                        ; codifica en codigo de 7 segmentos para ser guardados en las variables DISP1,
                        ; DISP2, DISP3, DISP4. Cada uno de estos display representa un display de la
                        ; dragon 12
                        ;
                        ; Parametros de entrada: Las variables BCD1 y BCD2 que contienen numeros en BCD
                        ;
                        ;
                        ; Parametros de salida: Devuelve el resultado en DISP1,DISP2, DISP3, DISP4.
                        ;*******************************************************************************
                        
                        
244a                    BCD_7SEG:
244a ce 10 15                   LDX #BCD1          ;Declaracion punteros iniciales
244d cd 10 19                   LDY #DISP1
2450 86 02                      LDAA #2
2452                    BCD_7SEG_main_loop:
2452 27 25                      BEQ BCD_7SEG_FIN
2454 36                         PSHA
2455 a6 00                      LDAA 0,X            ; CARGANDO NUMEROS A PROCESAR
2457 e6 00                      LDAB 0,X
2459 34                         PSHX
245a ce 10 40                   LDX #SEGMENT
245d c4 0f                      ANDB #$0F
245f 18 0a e5 70                MOVB B,X,1,Y+
2463 44                         LSRA                     ; Analizando segundo nibble
2464 44                         LSRA
2465 44                         LSRA
2466 44                         LSRA
2467 81 0f                      CMPA #$0F
2469 27 06                      BEQ BCD_7SEG_CLEAR        ; Si el numero es invalido?
246b 18 0a e4 70                MOVB A,X,1,Y+
246f 20 02                      BRA BCD_7SEG_CONT
2471                    BCD_7SEG_CLEAR:
2471 69 70                      CLR 1,Y+
2473                    BCD_7SEG_CONT:
2473 30                         PULX                         ; Preparando para el sig ciclo
2474 32                         PULA
2475 08                         INX
2476 43                         DECA
2477 20 d9                      BRA BCD_7SEG_main_loop
2479                    BCD_7SEG_FIN:
2479 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                SUBRUTINA PATRON_LEDS
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de encender los leds en manera de 
                        ; alarma desde PH7 hasta PH3 cuando se pone en alto la bandera. 
                        
                        ; Parametros de entrada:
                        ;       ALARMA: Bandera que si esta en 1 hace que la subrutina funcione
                        ;       LEDS: Para tomar lo que ya tiene y almacenar el led extra a encender
                        ;       
                        ; Parametros de salida:
                        ;       LEDS: Enciende el led correspondiente sin apagar el led de modo.
                        ;*******************************************************************************
                        
247a                    PATRON_LEDS:
247a 1e 10 01 10 09             BRSET BANDERAS+1,$10,PATRON_LEDS_desplazar_leds ; Si ALARMA = 1, se procede a hacer la alarma
247f 86 07                      LDAA #$07            ; Asegurando que no este puesto el patron de emergencia
2481 b4 10 1d                   ANDA LEDS
2484 7a 10 1d                   STAA LEDS
2487 3d                         RTS
2488                    PATRON_LEDS_desplazar_leds:            ; Logica de patron de emergencia
2488 86 f8                      LDAA #$F8
248a b4 10 1d                   ANDA LEDS
248d 44                         LSRA
248e 81 04                      CMPA #4
2490 23 0b                      BLS PATRON_LEDS_reiniciar_patron  ; De nuevo se enciende el LED pb7
2492 c6 07                      LDAB #$07            ; Guardanto en Leds el nuevo led encendido
2494 f4 10 1d                   ANDB LEDS
2497 18 06                      ABA
2499 7a 10 1d                   STAA LEDS
249c 3d                         RTS
249d                    PATRON_LEDS_reiniciar_patron: ; Reiniciando el patron de los LEDS en ph7
249d 1c 10 1d 80                BSET LEDS,$80
24a1 1d 10 1d 08                BCLR LEDS,$08
24a5 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;-------------------------------------------------------------------------------
                        ;-------------------SUBRUTINAS RELACIONADAS A TECLADO---------------------------
                        ;-------------------------------------------------------------------------------
                        ;*******************************************************************************
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA TAREA_TECLADO
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de realizar toda la logica para poder
                        ; leer una tecla del teclado, esto se realiza mediante distintos llamados a
                        ; subrutinas como MUX_TECLADO y FORMAR_ARRAY.
                        ;
                        ; Parametros de entrada:
                        ;       TECLAS: Contiene la tecla que se acaba de pulsar (si es que la hay),
                        ;               en caso de no estar presionada ninguna tecla el valor de TECLA
                        ;               es $FF
                        
                        ;       TECLA_IN: Contiene la tecla validada cuando se suelta el boton pre-
                        ;               sionado
                        ;
                        ;       NUM_ARRAY: Arreglo de tamano MAX_TCL que contendra los valores de las
                        ;         	    teclas leidas
                        
                        ; 	CONT_REB: Variable que es cargada en esta subrutina, la decrementa la
                        ;               interrupcion RTI, con el fin de controlar rebotes
                        
                        ; 	TECLA LISTA: Bandera que indica que la tecla esta lista y se puede
                        ;                       almacenar.
                        
                        ;       TECLA LEIDA: Bandera que Indica que se leyo una tecla.
                        
                        ; Parametros de salida:
                        ;       NUM_ARRAY: Arreglo de tamano MAX_TCL que contendra los valores de las
                        ; 		    teclas leidas
                        ;*******************************************************************************
                        
24a6                    TAREA_TECLADO:
24a6 ce 10 30                   LDX #TECLAS
24a9 cd 10 09                   LDY #NUM_ARRAY
24ac f7 10 06                   TST CONT_REB                 ;Verificando si ya pasaron los rbotes
24af 26 50                      BNE FIN_TAREA_TECLADO       ; Si aun se esta contando rebotes la subrutina termina
24b1 16 25 49                   JSR MUX_TECLADO             ; Ver si hay alguna tecla presionada
24b4 86 ff                      LDAA #$FF                   ; Verifica si ya no hay presionada una telca...
24b6 b1 10 04                   CMPA TECLA                  ; de ser asi revisa si una tecla fue soltada o si...
24b9 27 35                      BEQ TECLA_LISTA_TT          ; simplemente no se ha presionado una tecla.
24bb 1e 10 01 02 10             BRSET BANDERAS+1,$02,TECLA_LEIDA_TT ; Si la tecla ya fue leida (TCL_LEIDA = 1) salta
24c0 18 0c 10 04 10 05          MOVB TECLA, TECLA_IN        ;
24c6 1c 10 01 02                BSET BANDERAS+1,$02       ; TECLA LEIDA = 1
24ca 18 0b 0a 10 06             MOVB #10, CONT_REB
24cf 3d                         RTS
24d0                    TECLA_LEIDA_TT:                  ; Verificando si la tecla esta lista
24d0 b6 10 04                   LDAA TECLA
24d3 b1 10 05                   CMPA TECLA_IN
24d6 27 13                      BEQ PONER_BANDERA_TCL_LISTA ; Verificando si La tecla es valida por lo que se hace valida
24d8 18 0b ff 10 04             MOVB #$FF,TECLA
24dd 18 0b ff 10 05             MOVB #$FF,TECLA_IN
24e2 1d 10 01 01                BCLR BANDERAS+1,$01       ; TECLA LISTA = 0
24e6 1d 10 01 02                BCLR BANDERAS+1,$02       ; TECLA LEIDA = 0
24ea 3d                         RTS
24eb                    PONER_BANDERA_TCL_LISTA:          ; La tecla ya esta lista y se procesara hasta que se suelte la tecla
24eb 1c 10 01 01                BSET BANDERAS+1,$01       ; TECLA LISTA = 1
24ef 3d                         RTS
24f0                    TECLA_LISTA_TT:
24f0 1e 10 01 01 01             BRSET BANDERAS+1,$01,FORM_ARR_TT ; TECLA LISTA = 1?
24f5 3d                         RTS
24f6                    FORM_ARR_TT:
24f6 1d 10 01 01                BCLR BANDERAS+1,$01       ; TECLA LISTA = 0
24fa 1d 10 01 02                BCLR BANDERAS+1,$02       ; TECLA LEIDA = 0
24fe 16 25 02                   JSR FORMAR_ARRAY          ; Tecla lista para formar el araray
2501                    FIN_TAREA_TECLADO:
2501 3d                         RTS
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                SUBRUTINA FORMAR_ARRAY
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de formar el array con las teclas presio-
                        ; nadas por el usuario, tambien realiza el control y validacion de las distintas
                        ; teclas presionadas. Al llenar el array esta subrutina pone la bandera ARRAY_OK
                        ; en alto y el CONT_TCL en 0. El arreglo NUM_ARRAY utiliza como byte no valido
                        ; el valor $FF
                        ;
                        ; Parametros de entrada:
                        ;       TECLA_IN: Contiene la tecla ya validada para analizarla
                        ;
                        ;       NUM_ARRAY: Arreglo de tamano MAX_TCL que contendra los valores de las
                        ; 		    teclas leidas
                        ;
                        ;       CONT_TCL: Cuenta la cantidad de teclas ya almacenadas en el array.
                        ;
                        ;
                        ; Parametros de salida:
                        ;       NUM_ARRAY: Arreglo de tamano MAX_TCL que contendra los valores de las
                        ; 		    teclas leidas
                        ;       ARRAY_OK: Bandera que se encarga de validar que el arreglo esta listo.
                        ;*******************************************************************************
                        
2502                    FORMAR_ARRAY:
2502 f6 10 07                   LDAB CONT_TCL        ; Cargando valores a utilizar
2505 f1 10 03                   CMPB MAX_TCL         ; Verificando Si ya se leyo la cantidad maxima de digitos
2508 27 30                      BEQ FORMAR_ARRAY_lleno
250a 86 0e                      LDAA #$0E             ; Si la tecla es enter y MAX_TCL != Cont_TCL
250c b1 10 05                   CMPA TECLA_IN
250f 27 10                      BEQ FORMAR_ARRAY_enter_presionado
2511 86 0b                      LDAA #$0B             ; Si la tecla es borrar y MAX_TCL != Cont_TCL
2513 b1 10 05                   CMPA TECLA_IN
2516 27 0d                      BEQ FORMAR_ARRAY_borrar_presionado
2518 18 09 ed 10 05             MOVB TECLA_IN,B,Y     ; Guardando la tecla
251d 72 10 07                   INC CONT_TCL
2520 3d                         RTS
2521                    FORMAR_ARRAY_enter_presionado: ; Se presiono un enter y MAX_TCL != Cont_TCL
2521 04 61 0e                   TBNE B, FORMAR_ARRAY_array_ok ; Si hay al menos 1 digito
2524 3d                         RTS
2525                    FORMAR_ARRAY_borrar_presionado: ; Se presiono un borrar y MAX_TCL != Cont_TCL
2525 04 61 01                   TBNE B, FORMAR_ARRAY_borrar_digito ; Si hay al menos 1 digito
2528 3d                         RTS
2529                    FORMAR_ARRAY_borrar_digito:    ; Borrando un digito
2529 53                         DECB
252a 18 08 ed ff                MOVB #$FF,B,Y
252e 73 10 07                   DEC CONT_TCL
2531 3d                         RTS
2532                    FORMAR_ARRAY_array_ok: ;Validando el array
2532 79 10 07                   CLR CONT_TCL
2535 1c 10 01 04                BSET BANDERAS+1,$04   ; Array_ok <-- 1
2539 3d                         RTS
253a                    FORMAR_ARRAY_lleno:
253a 86 0e                      LDAA #$0E             ; Si la tecla es enter y MAX_TCL = Cont_TCL
253c b1 10 05                   CMPA TECLA_IN
253f 27 f1                      BEQ FORMAR_ARRAY_array_ok
2541 86 0b                      LDAA #$0B             ; Si la tecla es borrar y MAX_TCL = Cont_TCL
2543 b1 10 05                   CMPA TECLA_IN
2546 27 e1                      BEQ FORMAR_ARRAY_borrar_digito
2548 3d                         RTS
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                SUBRUTINA MUX_TECLADO
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de leer una tecla del teclado de la
                        ; Dragon 12. Utiliza como variable PATRON que es un contador que cuando es mayor
                        ; a 4 (las filas del teclado) se termina la subrutina porque no se leyo ninguna
                        ; tecla. En caso de que se lea una tecla se retorna en la variable TECLA. Si
                        ; no existia una tecla se retorna un $FF en TECLA.
                        
                        ; Parametros de entrada:
                        ;       PATRON: Se utiliza como constante para leer el teclado de 3x4.
                        
                        ;
                        ; Parametros de salida:
                        ;       TECLA: Retorna la tecla leida en el teclado. Si no se encuentra tecla
                        ;              presionada, se devuelve $FF.
                        ;*******************************************************************************
                        
                        ;Descripcion:
                        
2549                    MUX_TECLADO:
2549 18 0b ff 10 04             MOVB #$FF,TECLA
254e 18 0b 01 10 08             MOVB #1, PATRON               ; Inicializacion de variables
2553 86 ef                      LDAA #$EF
2555                    Loop_filas:
2555 5a 00                      STAA PORTA                                 ; Poniendo en las filas el valor de prueba  (EX,DX,BX,7X)
2557 c6 0a                      LDAB #10            ;Esperando un poquito mientras se escribe PORTA
2559 04 31 fd           wait:   DBNE B,wait         ; Ya que puede dar algunos problemas de temporizacion si no se hace esto
255c f6 10 08                   LDAB PATRON                                ; Si ya se leyeron las 4 filas, termina
255f c1 04                      CMPB #4
2561 22 27                      BHI FIN_MUX_TECLADO
2563 c6 03                      LDAB #3
2565 4f 00 01 10                BRCLR PORTA,$01,Tecla_encontrada           ; Verificando si alguna columna esta en 0
2569 53                         DECB
256a 4f 00 02 0b                BRCLR PORTA,$02,Tecla_encontrada
256e 53                         DECB
256f 4f 00 04 06                BRCLR PORTA,$04,Tecla_encontrada
2573 72 10 08                   INC PATRON                                 ; Aumentando para siguiente iteracion
2576 48                         LSLA                                       ; Desplazando para obtener el siguiente valor en la parte alta del pin A (EX,DX,BX,7X)
2577 20 dc                      BRA Loop_filas
2579                    Tecla_encontrada:                                 ; Analizando cual tecla es Mediante la ecuacion: PATRON*3 - (3-Columna)
2579 b6 10 08                   LDAA PATRON                               ; Esta ecuacion da el indice en el areglo TECLAS
257c 37                         PSHB                                      ; Guardando para utilizar posteriormente
257d c6 03                      LDAB #3
257f 12                         MUL
2580 b7 10                      TFR B,A
2582 33                         PULB                                      ; Restaurando de pila
2583 18 16                      SBA
2585 18 0d e4 10 04             MOVB A,X,TECLA
258a                    FIN_MUX_TECLADO:                                 ; Retornando
258a 3d                         RTS
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;-------------------------------------------------------------------------------
                        ;-------------------SUBRUTINAS RELACIONADAS A LA LCD ---------------------------
                        ;-------------------------------------------------------------------------------
                        ;*******************************************************************************
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA LCD
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de inicializar la pantalla LCD en el
                        ; comienzo de la ejecucion del programa. Esta operacion solo se realiza una vez
                        ; antes de entrar al main principal.
                        ;
                        ; Parametros de entrada: N/A
                        ;
                        ; Parametros de salida: N/A
                        ;*******************************************************************************
258b                    LCD:
258b ce 10 50                   LDX #iniDsp
258e                    Loop_lcd_inic:
258e a6 30                      LDAA 1,X+
2590 81 ff                      CMPA #EOM
2592 27 12                      BEQ FIN_Loop_lcd_inic
2594 1d 10 01 80                BCLR BANDERAS+1, $80            ; para mandar un comando
2598 16 25 b9                   JSR SEND
259b 18 0c 10 28 10 25          MOVB D60uS,CONT_DELAY
25a1 16 26 57                   JSR DELAY
25a4 20 e8                      BRA Loop_lcd_inic
25a6                    FIN_Loop_lcd_inic:
25a6 86 01                      LDAA #$01              ; CLEAR DISPLAY
25a8 1d 10 01 80                BCLR BANDERAS+1, $80            ; para mandar un comando
25ac 16 25 b9                   JSR SEND
25af 18 0c 10 26 10 25          MOVB D2ms,CONT_DELAY
25b5 16 26 57                   JSR DELAY
25b8 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA SEND
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina envia datos o comandos a pantalla LCD. Es utiliza-
                        ; da por la subrutina CARGAR_LCD y LCD.
                        ;
                        ; Parametros de entrada: La bandera COMANDO_DATO. Si esta en 0 se manda un co-
                        ; mando. Si esta en 1 se desea mandar un dato.
                        ;
                        ; Parametros de salida: N/A
                        ;*******************************************************************************
                        
25b9                    SEND:
25b9 36                         PSHA
25ba 84 f0                      andA #$F0
25bc 44                         LSRA
25bd 44                         LSRA
25be 5a 32                      STAA PORTK
25c0 1f 10 01 80 05             BRCLR BANDERAS+1,$80,SEND_comando  ; 0 COMANDO, 1 DATO
25c5 4c 32 01                   BSET PORTK,$01
25c8 20 03                      BRA SEND_continuar
25ca                    SEND_comando:
25ca 4d 32 01                   BCLR PORTK,$01
25cd                    SEND_continuar:
25cd 4c 32 02                   BSET PORTK,$02
25d0 18 0c 10 27 10 25          MOVB D260us,CONT_DELAY
25d6 16 26 57                   JSR DELAY
25d9 4d 32 02                   BCLR PORTK,$02
                        
25dc 32                         PULA
25dd 84 0f                      andA #$0F
25df 48                         LSLA
25e0 48                         LSLA
25e1 5a 32                      STAA PORTK
25e3 1f 10 01 80 05             BRCLR BANDERAS+1,$80,SEND_comando2  ; 0 COMANDO, 1 DATO
25e8 4c 32 01                   BSET PORTK,$01
25eb 20 03                      BRA SEND_continuar2
25ed                    SEND_comando2:
25ed 4d 32 01                   BCLR PORTK,$01
25f0                    SEND_continuar2:
25f0 4c 32 02                   BSET PORTK,$02
25f3 18 0c 10 27 10 25          MOVB D260us,CONT_DELAY
25f9 16 26 57                   JSR DELAY
25fc 4d 32 02                   BCLR PORTK,$02
25ff 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA CARGAR_LCD
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de enviar mensajes a la pantalla LCD.
                        ; Solo es necesario pasar los mensajes por los punteros X y Y y la subrutina se
                        ; encarga de hacer el resto.
                        ;
                        ; Parametros de entrada: En X recibe el puntero de inicio del mensaje que se
                        ; quiere desplegar en la parte de arriba de la LCD. En Y recibe el mensaje que
                        ; se quiere desplegar en la parte de abajo de la LCD.
                        ;
                        ; Parametros de salida: N/A
                        ;*******************************************************************************
                        
2600                    CARGAR_LCD:
2600 b6 10 2a                   LDAA ADD_L1
2603 1d 10 01 80                BCLR BANDERAS+1, $80            ; para mandar un comando
2607 16 25 b9                   JSR SEND
260a 18 0c 10 28 10 25          MOVB D60uS,CONT_DELAY
2610 16 26 57                   JSR DELAY
2613                    CARGAR_LCD_first_loop:
2613 a6 30                      LDAA 1,X+
2615 81 ff                      CMPA #EOM
2617 27 12                      BEQ CARGAR_LCD_first_loop_end
2619 1c 10 01 80                BSET BANDERAS+1, $80            ; para mandar un dato
261d 16 25 b9                   JSR SEND
2620 18 0c 10 28 10 25          MOVB D60uS,CONT_DELAY
2626 16 26 57                   JSR DELAY
2629 20 e8                      BRA CARGAR_LCD_first_loop
262b                    CARGAR_LCD_first_loop_end:
262b b6 10 2b                   LDAA ADD_L2
262e 1d 10 01 80                BCLR BANDERAS+1, $80            ; para mandar un comando
2632 16 25 b9                   JSR SEND
2635 18 0c 10 28 10 25          MOVB D60uS,CONT_DELAY
263b 16 26 57                   JSR DELAY
                        
263e                    CARGAR_LCD_SECOND_loop:
263e a6 70                      LDAA 1,Y+
2640 81 ff                      CMPA #EOM
2642 27 12                      BEQ CARGAR_LCD_SECOND_loop_end
2644 1c 10 01 80                BSET BANDERAS+1, $80            ; para mandar un dato
2648 16 25 b9                   JSR SEND
264b 18 0c 10 28 10 25          MOVB D60uS,CONT_DELAY
2651 16 26 57                   JSR DELAY
2654 20 e8                      BRA CARGAR_LCD_SECOND_loop
2656                    CARGAR_LCD_SECOND_loop_end:
2656 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA DELAY
                        ;*******************************************************************************
                        ;                                  Encabezado
                        ; Descripcion: Esta subrutina se encarga de generar delays a partir de la variable
                        ; CONT_DELAY. Esta subrutina debe ser utilizada con precaucion ya que es senci-
                        ; llo de notar que detiene el procesador (no las interrupciones) por alguna can-
                        ; tidad de tiempo programada por el usuario.
                        ;
                        ; Parametros de entrada: Se recibe un valor en CONT_DELAY. Por ejemplo un valor
                        ; de CONT_DELAY de 50 da una interrupcion de 1x10-3 segundos, debido a que cada
                        ; decremento de CONT_DELAY se da cada 20us por la interrupcion OC4.
                        ;
                        ; Parametros de salida: N/A
                        ;*******************************************************************************
2657                    DELAY:
2657 f7 10 25                   TST CONT_DELAY
265a 26 fb                      BNE DELAY
265c 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        

Executed: Sat Dec 14 20:54:08 2019
Total cycles: 1979, Total bytes: 1813
Total errors: 0, Total warnings: 0
