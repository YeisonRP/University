
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;*******************************************************************************
                        ;                               TAREA 2: EJERCICIO 1
                        ;                          PROGRAMA ORDENAR MENOR A MAYOR
                        ;*******************************************************************************
                        ;
                        ;       UNIVERSIDAD DE COSTA RICA
                        ;       FECHA 18/09/19
                        ;       AUTOR: YEISON RODRIGUEZ PACHECO B56074
                        ;       COREREO: yeisonrodriguezpacheco@gmail.com
                        ;
                        ; Descripcion: Este es un programa que se encarga de ordenar un array de numeros
                        ; de un byte ubicados en la direccion ORDENAR, dichos numeros son con signo y
                        ; ademas la longitud del array es menor de 200. Los numeros se ordenan de menor
                        ; a mayor sin tomar en cuenta los ceros. Los datos ordenados se almacenan en un
                        ; array que comienza en la direccion ORDENADOS. La cantidad de datos a ordenar
                        ; se almacena en la variable CANT. Las variables CLEAR y CONTADOR son de un byte
                        ; y se utilizan para poner en 0 el numero ya analizado en una iteracion y para
                        ; llevar la cuenta de cuando se debe detener el programa.
                        ;
                        ;
1000                            ORG $1000
1000                    CANT:      ds 1
1001                    CLEAR:     ds 1
1002                    CONTADOR:  ds 1
                        
1100                            ORG $1100
1100                    ORDENAR:              ds 32
                        
1120                            ORG $1120
1120                    ORDENADOS:      ds 32
                        
1500                            ORG $1500
                                
1500 ce 11 00                   LDX #ORDENAR
1503 cd 11 20                   LDY #ORDENADOS
1506 b6 10 00                   LDAA CANT   	; CONTADOR '= CANT - 1
1509 27 3a                      BEQ FIN     	; Si cant es 0, termina
150b 43                         DECA
150c 7a 10 02                   STAA CONTADOR
150f 79 10 01                   CLR CLEAR   	; CLEAR = 0
                                
1512                    Main_loop:
1512 c7                 	CLRB        	; B = 0
1513 b6 10 00                   LDAA CANT   	; A '= CANT - 1
1516 43                         DECA
1517                    check_next_number:
1517 e7 e4              	TST A,X  	; Es el numero analizado 0?
1519 27 15                      BEQ decrementar_contador_interno
151b c1 00                      CMPB #0  	; B = 0?
151d 27 0c                      BEQ guardar_num
151f e1 e4                      CMPB A,X    ; Numero actual mayor o igual a numero en memoria?
1521 2e 08                      BGT guardar_num
1523 e1 e4                      CMPB A,X 	; Numero actual igual a numero en memoria?
1525 26 09                      BNE decrementar_contador_interno
1527 69 e4                      CLR A,X  	; Poniendo numero en memoria igual al actual en 0 para eliminarlo
1529 20 05                      BRA decrementar_contador_interno
152b                    guardar_num:
152b e6 e4                      LDAB A,X   	; Guardando numero que es menor al anterior
152d 7a 10 01                   STAA CLEAR 	; Guardando posicion de borrado para borrarlo si fue el menor en esta iteracion
1530                    decrementar_contador_interno:
1530 81 00                      CMPA #0    	; Si ya se leyeron todos los numeros en esta iteracion
1532 27 03                      BEQ decrementar_contador_general
1534 43                         DECA
1535 20 e0                      BRA check_next_number  ; Se lee el siguiente numero
1537                    decrementar_contador_general:
1537 b6 10 01                   LDAA CLEAR      ;Limpiando en ORDENAR el numero ya elegido en esta iteracion, para que no se vuelva a elegir
153a 69 e4                      CLR A,X
153c 6b 70                      STAB 1,Y+       ; Guardando el numero en ordenados
153e 73 10 02                   DEC CONTADOR
1541 27 02                      BEQ FIN
1543 20 cd                      BRA Main_loop   ; Repetir el ciclo ya que el contador general no ha llegado a 0
1545                    FIN:
1545 20 fe                      BRA FIN
                        
                        
                        

Executed: Thu Sep 19 19:04:05 2019
Total cycles: 84, Total bytes: 71
Total errors: 0, Total warnings: 0
