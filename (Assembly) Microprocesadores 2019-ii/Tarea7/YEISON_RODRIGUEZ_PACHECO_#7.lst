
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;*******************************************************************************
                        ;                                 TAREA 7                                      *
                        ;                           RELOJ DESPERTADOR 623                              *
                        ;*******************************************************************************
                        ;                                                                              *
                        ;       UNIVERSIDAD DE COSTA RICA                                              *
                        ;       FECHA 04/12/19                                                         *
                        ;       AUTOR: YEISON RODRIGUEZ PACHECO B56074                                 *
                        ;       COREREO: yeisonrodriguezpacheco@gmail.com                              *
                        ;                                                                              *
                        ;                                                                              *
                        ; Descripcion: Esta tarea consiste en un reloj que tiene una alarma. La alarma
                        ; se programa en tiempo de ensamblado en la constante de un byte llamada ALARMA,
                        ; dicha constante tiene como formato MM:HH minutos horas.
                        ; Al llegar el reloj al valor de ALARMA (leyendo el RTC cada cierto tiempo), se
                        ; activara una alarma que producira un sonido, ademas de que las luces led
                        ; se moveran de derecha a izquiera rapidamente. Al presionar el boton ph1 la
                        ; alarma se silencia.
                        ; Para resetear la hora (se pone igual a la hora indicada en la variable llamad
                        ; T_Write_RTC) se debe presionar el boton ph0. Los botones ph2 y ph3 controlan
                        ; la intensidad del brillo de la pantalla.
                        ; En la LCD de se mostrara el mensaje : Reloj Despertador 623.
                        ;
                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
                        
                        
                        ;*******************************************************************************
                        ;                        DECLARACION ESTRUCTURAS DE DATOS                      *
                        ;*******************************************************************************
00ff                    EOM:     EQU $FF
1000                            ORG $1000
                                
1000                    CONT_RTI:       ds 1
1001                    BANDERAS:       ds 1        ;COMANDO_DATO:X:X:ALARMA_LEDS:ALARMA:X:X:RTC_RW
                                                       ;ALARMA_LEDS en 1 enciende los leds,
                                                       ;ALARMA en 0 apaga la alarma, es controlado por ph0 y ph1
                                                       ;RTC_RW 1 escribe 0 lee el RTC
1002                    BRILLO:         ds 1        ; Brillo de los leds, se sube de 5 en 5. Va de 0 a 100 es la
1003                    CONT_DIG:       ds 1        ; Cuenta  El digito que se va a encenter
1004                    CONT_TICKS:     ds 1        ; Cuenta tiks del Output compare, va de 0 a 100
1005                    DT:             ds 1        ; DT = N - K duty cicle
1006                    BCD1:           ds 1        ; Digitos en BCD, los guarda la subrutina BIN_BCD
1007                    BCD2:           ds 1
1008                    DISP1:          ds 1        ; Los 4 valores de los display que se escriben en PORTB
1009                    DISP2:          ds 1
100a                    DISP3:          ds 1
100b                    DISP4:          ds 1
100c                    LEDS:           ds 1        ; LEDS a ser encendidos
100d 3f 06 5b 4f 66 6d  SEGMENT:       dB $3f,$06,$5b,$4f,$66,$6d,$7d,$07,$7f,$6f
     7d 07 7f 6f
1017                    CONT_7SEG:      ds 2        ; Para hacer que cada 10hz se llame a BCD_7SEG
1019                    CONT_DELAY:     ds 1
101a 64                 D2mS:           dB 100
101b 0d                 D260uS:         dB 13
101c 03                 D60uS:          dB 3
101d                    CLEAR_LCD:      ds 1
101e 80                 ADD_L1:         dB $80
101f c0                 ADD_L2:         dB $C0
1020 04 28 28 06 0c     iniDsp:         db $04,$28,$28,$06,%00001100 ;disp on, cursor off, no blinkin
1025 ff                                 db EOM
                        ; 1024 -- POR EOM
1026                    Index_RTC:      ds 1
1027 d0                 Dir_WR:         db $D0
1028 d1                 Dir_RD:         db $D1
1029 00                 Dir_Seg:        db $00
102a 01 08              ALARMA:         dW $0108 ; mm:hh MINUTOS Y HORAS
1030                            ORG $1030
1030 51 00 08 01 05 12  T_Write_RTC:    db $51,$00,$08,$01,$05,$12 ; 0 segundos, 03 minutos, 09 h, dia 1, date = 04, mes 12 y a;o 19
1040                            ORG $1040
1040                    T_Read_RTC:     ds 7
                        
                        ; MENSAJES
1047 20 20 20 20 20 52  Msj_reloj:    fcc "     RELOJ      "
     45 4c 4f 4a 20 20
     20 20 20 20
1057 ff                         db EOM
1058 20 44 45 53 50 45  Msj_despertador:    fcc " DESPERTADOR 623"
     52 54 41 44 4f 52
     20 36 32 33
1068 ff                         db EOM
                        
1069                    CONT_REB:       ds 1    ; Contador de rebotes para los botones
                        #include registers.inc
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0        ; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE        equ        $0        ; register base
1000                    DATASTART equ        $1000        ; Start of data memory
2000                    DATAEND  equ        $2000        ; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ        $2000        ; Start of program memory (might be ROM)
3bff                    PREND        equ        $3BFF        ; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar        equ        $EE84        ; Implemented in emulator
ee86                    Putchar equ        $EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ        $EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00        ; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $3E00        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $400        ; Start of program memory
                        PREND        equ        $FFF        ; End of program memory
                        
                        VECTORTABLE equ $3E00        ; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $4000        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $8000        ; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed.
                        PREND        equ        $EF7F        ; End of program memory
                        
                        VECTORTABLE equ $EF80        ; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ        DATASTART ; For compatibility
2000                    RAMEND equ        DATAEND
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:                equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:        equ REGBASE+$1a ;part id high
001b                    PARTIDL:        equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:        equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:        equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:                equ REGBASE+$30 ;program page register
                        
0032                    PORTK:                equ REGBASE+$32 ;port k data
0033                    DDRK:                equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT:       equ REGBASE+$86 ;adc status register hi
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:        equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:                equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:                equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:                equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:                equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:                equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:                equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:        equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:        equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:        equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:                equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:        equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:        equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:                equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:        equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:        equ REGBASE+$100 ;flash clock divider
0101                    FSEC:                equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:                equ REGBASE+$103 ;flash configuration register
0104                    FPROT:                equ REGBASE+$104 ;flash protection register
0105                    FSTAT:                equ REGBASE+$105 ;flash status register
0106                    FCMD:                equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:        equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:                equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:                equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:                equ REGBASE+$115 ;eeprom status register
0116                    ECMD:                equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:        equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:        equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:        equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:        equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:        equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:        equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:        equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:        equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:        equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:        equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:        equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:        equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:        equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:        equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:        equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:        equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:        equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:        equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:        equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:        equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:        equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:        equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:        equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:        equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:        equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:        equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:        equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:        equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:        equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:        equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:        equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:        equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:        equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:        equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:        equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:        equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:        equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:        equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:        equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:        equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:        equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:        equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:        equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:        equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:        equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:        equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:        equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:        equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:        equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:        equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:        equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:        equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:        equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:        equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:        equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:        equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:        equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:        equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:        equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:        equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:        equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:        equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:        equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:        equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:        equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:        equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:        equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:        equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:        equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:        equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:        equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:        equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:        equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:        equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:        equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:        equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:        equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:        equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:        equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:        equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:        equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:        equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:        equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:        equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:        equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:        equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:        equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:        equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:        equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:        equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:        equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:        equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:        equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:        equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:        equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:        equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:        equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:        equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:        equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:        equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:        equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:        equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:        equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:        equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:        equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:        equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:        equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:        equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:        equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:        equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:        equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:        equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:        equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:        equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:        equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:        equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:        equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:        equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:        equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:        equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:        equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:        equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:        equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:        equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:        equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:        equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:        equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:        equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:        equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:                equ REGBASE+$240 ;portt data register
0241                    PTIT:                equ REGBASE+$241 ;portt input register
0242                    DDRT:                equ REGBASE+$242 ;portt direction register
0243                    RDRT:                equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:                equ REGBASE+$244 ;portt pull device enable
0245                    PPST:                equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:                equ REGBASE+$248 ;ports data register
0249                    PTIS:                equ REGBASE+$249 ;ports input register
024a                    DDRS:                equ REGBASE+$24a ;ports direction register
024b                    RDRS:                equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:                equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:                equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:                equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:                equ REGBASE+$250 ;portm data register
0251                    PTIM:                equ REGBASE+$251 ;portm input register
0252                    DDRM:                equ REGBASE+$252 ;portm direction register
0253                    RDRM:                equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:                equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:                equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:                equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:                equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:                equ REGBASE+$258 ;portp data register
0259                    PTIP:                equ REGBASE+$259 ;portp input register
025a                    DDRP:                equ REGBASE+$25a ;portp direction register
025b                    RDRP:                equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:                equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:                equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:                equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:                equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:                equ REGBASE+$260 ;porth data register
0261                    PTIH:                equ REGBASE+$261 ;porth input register
0262                    DDRH:                equ REGBASE+$262 ;porth direction register
0263                    RDRH:                equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:                equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:                equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:                equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:                equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:                equ REGBASE+$268 ;portj data register
0269                    PTIJ:                equ REGBASE+$269 ;portj input register
026a                    DDRJ:                equ REGBASE+$26a ;portj direction register
026b                    RDRJ:                equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:                equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:                equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:                equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:                equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:        equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:        equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:        equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:        equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:        equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:        equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:        equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:        equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:        equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:        equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:        equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:        equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:        equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:        equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:        equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:        equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:        equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:        equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:        equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:        equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:        equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:        equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:        equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:        equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:        equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:        equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:        equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:        equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:        equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:        equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:        equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:        equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                       DECLARACION VECTORES INTERRUPCION
                        ;*******************************************************************************
                                ; Vector interrupcion output compare canal 4
3e66                            ORG $3e66
3e66 22 6d                      dw OC4_ISR
                        
                                ; Vector interrupcion output compare canal 5
3e64                            ORG $3e64
3e64 22 f8                      dw OC5_ISR
                                
                                ; Vector interrupcion del real time interrupt
3e70                            ORG $3e70
3e70 21 b8                      dw RTI_ISR
                                
                                ; Vector de interrupcion de key wakeups
3e4c                            ORG $3e4c
3e4c 21 ef                      dw PHO_ISR
                        
                                ; Interrupcion IIC
3e40                            ORG $3e40
3e40 23 00                      dw IIC_ISR
                                
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;-------------------------------------------------------------------------------
                        ;--------------------------------------MAIN-------------------------------------
                        ;-------------------------------------------------------------------------------
                        ;*******************************************************************************
                        
2000                            ORG $2000
2000 cf 3b ff                   LDS #$3BFF
                        ;INICIALIZACION DE HARDWARE:
                                ;subrutina iic:
2003 18 0b 1f 00 e1             MOVB #$1F,IBFD  ; Este valor se encontro en la tabla al buscar el 240 en SCL divider
                                ; el scl divider se calcula como 24Mhz/100kbits/s = 240
                                ; Esto da un total de ciclos de 33 que se traduce a 1.375us, este valor es menor
                                ; a 3.45us que es el maximo tiempo que permite la dragon, y tambien es mayor
                                ; al minimo tiempo de hold del RTC que es de 0.3us
                        
                                ;subrutina RTI_ISR:
2008 18 0b 75 00 3b             movb #$75,RTICTL        ; M = 7 n = 5 interrupcion cada 49.52ms
200d 4c 38 80                   bset CRGINT,#$80        ; activa rti
                        
                                ;subrutina PHO_ISR:
2010 1c 02 66 0f                bset PIEH,$0F           ; Activando interrupcion PH0,PH1,PH2,PH3
                        
                                ;Inicializacion de Output compare canal 4
2014 4c 46 90                   BSET TSCR1,$90 ; TEN = 1 , TFFCA = 1. Habilitando modulo timers y el borrado rapido
2017 79 00 4d                   CLR TSCR2         ; Preescalador = 1
201a 4c 4c 10                   BSET TIE,$10    ; Habilitando interrupcion output compare canal 4
201d 4c 40 10                   BSET TIOS,$10   ; Pone como salida canal 4
2020 4c 48 04                   BSET TCTL1,$04  ; Pone a hacer toogle OC5
                        
                                
                                ; Inicializacion de Puerto B y P para uso de los display de 7 seg.
2023 18 0b ff 00 03             MOVB #$FF,DDRB            ; Todas salidas puerto B (segentos de display)
2028 18 0b 0f 02 5a             MOVB #$0F,DDRP            ; 4 salidas puerto P (activan cada display)
                        
                                ;Inicializacion puerto J para usar leds
202d 1c 02 6a 02                bset DDRJ,$02             ; Salida puerto j
                        
                                ; Pantalla LED
2031 18 0b ff 00 33             MOVB #$FF,DDRK  ; Puerto K como salidas
                                
                        ;INICIALIZACION DE VARIABLES:
2036 10 ef                      CLI                     ; Activando interrupciones
2038 79 10 01                   CLR BANDERAS
                                ;*;
203b 79 10 26                   CLR Index_RTC
                                ; DISPLAYS
203e 79 10 26                   CLR Index_RTC
2041 79 10 03                   CLR CONT_DIG
2044 79 10 04                   CLR CONT_TICKS
2047 79 10 02                   CLR BRILLO
204a 79 10 06                   CLR BCD1
204d 79 10 07                   CLR BCD2
2050 79 10 0c                   CLR LEDS
2053 79 10 69                   CLR CONT_REB
2056 18 03 00 00 10 17          MOVW #0,CONT_7SEG
205c ce 10 41                   LDX #T_Read_RTC+1     ; Borrando parte importante del arreglo
205f 18 00 00 00 00             MOVW #$0000,0,X
                                
2064 dc 44                      LDD TCNT        ; Inicializa TC4  , esto va mas abajo
2066 c3 00 3c                   ADDD #60
2069 5c 58                      STD TC4
                        
                                ;*;
206b dc 44                      LDD TCNT                       ; Guardando en TC5 la siguiente interrupcion
206d c3 00 0a                   ADDD #10
2070 5c 5a                      STD TC5
                                
2072 16 20 9f                   jsr LCD         ; Inicializar LCD
2075 ce 10 47                   LDX #Msj_reloj       ; Cargando LCD
2078 cd 10 58                   LDY #Msj_despertador
207b 16 21 14                   JSR CARGAR_LCD
                                
                                
                        ;*******************************************************************************
                        ;                             MAIN
                        ;*******************************************************************************
207e                    Main:
207e ce 10 41                   LDX #T_Read_RTC+1
2081 fc 10 2a                   LDD ALARMA
2084 ac 00                      CPD 0,X                ; Comparando la hora y minutos con alarma
2086 26 0c                      BNE esperar
2088 1f 10 01 08 07             BRCLR BANDERAS,$08,esperar      ; Bit para que la alarma no vuelva a sonar
208d 4c 40 20                   BSET TIOS,$20           ; Para encender sonido
2090 1c 10 01 10                BSET BANDERAS,$10       ; Para encender leds
2094                    esperar:
2094 1c 02 66 0f                bset PIEH,$0F
2098 86 ff                      LDAA #$FF
209a 04 30 fd           Loop:   DBNE A,Loop
209d 20 df                      bra Main
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA LCD
                        ;*******************************************************************************
                        ;Descripcion: Esta subrutina inicializa la pantalla LCD
209f                    LCD:
209f ce 10 20                   LDX #iniDsp
20a2                    Loop_lcd_inic:
20a2 a6 30                      LDAA 1,X+
20a4 81 ff                      CMPA #EOM
20a6 27 12                      BEQ FIN_Loop_lcd_inic
20a8 1d 10 01 80                BCLR BANDERAS, $80            ; para mandar un comando
20ac 16 20 cd                   JSR SEND
20af 18 0c 10 1c 10 19          MOVB D60uS,CONT_DELAY
20b5 16 21 6b                   JSR DELAY
20b8 20 e8                      BRA Loop_lcd_inic
20ba                    FIN_Loop_lcd_inic:
20ba 86 01                      LDAA #$01              ; CLEAR DISPLAY
20bc 1d 10 01 80                BCLR BANDERAS, $80            ; para mandar un comando
20c0 16 20 cd                   JSR SEND
20c3 18 0c 10 1a 10 19          MOVB D2ms,CONT_DELAY
20c9 16 21 6b                   JSR DELAY
20cc 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA SEND
                        ;*******************************************************************************
                        ;Descripcion: Esta subrutina envia datos o comandos a pantalla LCD, recibe como
                        ; parametro la bandera COMANDO_DATO en 0 si es comando, 1 si es dato
                        
20cd                    SEND:
20cd 36                         PSHA
20ce 84 f0                      andA #$F0
20d0 44                         LSRA
20d1 44                         LSRA
20d2 5a 32                      STAA PORTK
20d4 1f 10 01 80 05             BRCLR BANDERAS,$80,SEND_comando  ; 0 COMANDO, 1 DATO
20d9 4c 32 01                   BSET PORTK,$01
20dc 20 03                      BRA SEND_continuar
20de                    SEND_comando:
20de 4d 32 01                   BCLR PORTK,$01
20e1                    SEND_continuar:
20e1 4c 32 02                   BSET PORTK,$02
20e4 18 0c 10 1b 10 19          MOVB D260us,CONT_DELAY
20ea 16 21 6b                   JSR DELAY
20ed 4d 32 02                   BCLR PORTK,$02
                        
20f0 32                         PULA
20f1 84 0f                      andA #$0F
20f3 48                         LSLA
20f4 48                         LSLA
20f5 5a 32                      STAA PORTK
20f7 1f 10 01 80 05             BRCLR BANDERAS,$80,SEND_comando2  ; 0 COMANDO, 1 DATO
20fc 4c 32 01                   BSET PORTK,$01
20ff 20 03                      BRA SEND_continuar2
2101                    SEND_comando2:
2101 4d 32 01                   BCLR PORTK,$01
2104                    SEND_continuar2:
2104 4c 32 02                   BSET PORTK,$02
2107 18 0c 10 1b 10 19          MOVB D260us,CONT_DELAY
210d 16 21 6b                   JSR DELAY
2110 4d 32 02                   BCLR PORTK,$02
2113 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA CARGAR_LCD
                        ;*******************************************************************************
                        ;Descripcion: Esta subrutina carga los mensajes en la LCD
                        
2114                    CARGAR_LCD:
2114 b6 10 1e                   LDAA ADD_L1
2117 1d 10 01 80                BCLR BANDERAS, $80            ; para mandar un comando
211b 16 20 cd                   JSR SEND
211e 18 0c 10 1c 10 19          MOVB D60uS,CONT_DELAY
2124 16 21 6b                   JSR DELAY
2127                    CARGAR_LCD_first_loop:
2127 a6 30                      LDAA 1,X+
2129 81 ff                      CMPA #EOM
212b 27 12                      BEQ CARGAR_LCD_first_loop_end
212d 1c 10 01 80                BSET BANDERAS, $80            ; para mandar un dato
2131 16 20 cd                   JSR SEND
2134 18 0c 10 1c 10 19          MOVB D60uS,CONT_DELAY
213a 16 21 6b                   JSR DELAY
213d 20 e8                      BRA CARGAR_LCD_first_loop
213f                    CARGAR_LCD_first_loop_end:
213f b6 10 1f                   LDAA ADD_L2
2142 1d 10 01 80                BCLR BANDERAS, $80            ; para mandar un comando
2146 16 20 cd                   JSR SEND
2149 18 0c 10 1c 10 19          MOVB D60uS,CONT_DELAY
214f 16 21 6b                   JSR DELAY
                                
2152                    CARGAR_LCD_SECOND_loop:
2152 a6 70                      LDAA 1,Y+
2154 81 ff                      CMPA #EOM
2156 27 12                      BEQ CARGAR_LCD_SECOND_loop_end
2158 1c 10 01 80                BSET BANDERAS, $80            ; para mandar un dato
215c 16 20 cd                   JSR SEND
215f 18 0c 10 1c 10 19          MOVB D60uS,CONT_DELAY
2165 16 21 6b                   JSR DELAY
2168 20 e8                      BRA CARGAR_LCD_SECOND_loop
216a                    CARGAR_LCD_SECOND_loop_end:
216a 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA DELAY
                        ;*******************************************************************************
                        ;Descripcion: Esta subrutina se encarga de generar delays a partir de la variable
                        ;CONT_DELAY. Por ejemplo un valor de CONT_DELAY de 50 da una interrupcion de 1x10-3
                        ; Debido a que cada decremento de CONT_DELAY se da cada 20us
                        
216b                    DELAY:
216b f7 10 19                   TST CONT_DELAY
216e 26 fb                      BNE DELAY
2170 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                             SUBRUTINA BCD_7SEG
                        ;*******************************************************************************
                        ;Descripcion: Esta subrutina pasa valores de BCD1 y BCD2 a DISP1,DISP2,DISP3,
                        ; DISP4, en su respectivo codigo de 7 segmentos. Si hay ceros a la izquierda
                        ; se envia un codigo $fx. Tambien se encarga de enviar a los display 2 y 3
                        ; encendido y apagado segun el valor de los segundos leidos del rtc
                        
2171                    BCD_7SEG:
2171 ce 10 06                   LDX #BCD1          ;Declaracion punteros iniciales
2174 cd 10 08                   LDY #DISP1
2177 86 02                      LDAA #2
2179                    BCD_7SEG_main_loop:
2179 27 25                      BEQ BCD_7SEG_FIN
217b 36                         PSHA
217c a6 00                      LDAA 0,X            ; CARGANDO NUMEROS A PROCESAR
217e e6 00                      LDAB 0,X
2180 34                         PSHX
2181 ce 10 0d                   LDX #SEGMENT
2184 c4 0f                      ANDB #$0F
2186 18 0a e5 70                MOVB B,X,1,Y+
218a 44                         LSRA                     ; Analizando segundo nibble
218b 44                         LSRA
218c 44                         LSRA
218d 44                         LSRA
218e 81 0f                      CMPA #$0F
2190 27 06                      BEQ BCD_7SEG_CLEAR        ; Si el numero es invalido?
2192 18 0a e4 70                MOVB A,X,1,Y+
2196 20 02                      BRA BCD_7SEG_CONT
2198                    BCD_7SEG_CLEAR:
2198 69 70                      CLR 1,Y+
219a                    BCD_7SEG_CONT:
219a 30                         PULX                         ; Preparando para el sig ciclo
219b 32                         PULA
219c 08                         INX
219d 43                         DECA
219e 20 d9                      BRA BCD_7SEG_main_loop
21a0                    BCD_7SEG_FIN:                     ; Puntos de los segundos
21a0 1f 10 40 01 0a             BRCLR T_Read_RTC,$01,BCD_7SEG_FIN_msb_0
21a5 1c 10 09 80                BSET DISP2,$80
21a9 1c 10 0a 80                BSET DISP3,$80
21ad 20 08                      BRA BCD_7SEG_FIN_real
21af                    BCD_7SEG_FIN_msb_0:
21af 1d 10 09 80                BCLR DISP2,$80
21b3 1d 10 0a 80                BCLR DISP3,$80
21b7                    BCD_7SEG_FIN_real:
21b7 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;-------------------------------------------------------------------------------
                        ;-------------------------------INTERRUPCIONES----------------------------------
                        ;-------------------------------------------------------------------------------
                        ;*******************************************************************************
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION RTI_ISR
                        ;*******************************************************************************
                        ;Descripcion: Esta interrupcion se encarga de incrementar la variable CONT_RTI en 1
                        ; cada 50 ms aproximadamente, Esta subrutina cada vez que pasa 1 segundo se
                        ; encarga de mandar una lectura el RTC para que actualice la hora al sistema
                        
21b8                    RTI_ISR:
21b8 4c 37 80                           BSET CRGFLG,#$80
21bb b6 10 69                           LDAA CONT_REB
21be 27 03                              BEQ RTI_ISR_CONTINUAR
21c0 73 10 69                           DEC CONT_REB
21c3                    RTI_ISR_CONTINUAR:
                        
21c3 b6 10 00                           LDAA CONT_RTI
21c6 81 01                              CMPA #1 ;CMPA #19
21c8 27 04                              BEQ RTI_ISR_paso_1_segundo
21ca 72 10 00                           INC CONT_RTI                ; Incrementando y retornando
21cd 0b                                 RTI
                                        
21ce                    RTI_ISR_paso_1_segundo:
21ce 79 10 00                           CLR CONT_RTI
21d1 ce 10 40                           LDX #T_Read_RTC         ; Guardando minutos y horas
21d4 18 0d 20 10 06                     MOVB 1,+X,BCD1
21d9 18 0d 20 10 07                     MOVB 1,+X,BCD2
21de 1c 10 01 01                        BSET BANDERAS,$01       ; RTC_RW = 1
21e2 18 0c 10 27 00 e4                  MOVB Dir_WR,IBDR        ; Direccion de escritura
21e8 4c e2 10                           BSET IBCR,$10           ; Transmision
21eb 4c e2 20                           BSET IBCR,$20           ; START
21ee 0b                                 RTI
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION PHO_ISR
                        ;*******************************************************************************
                        ;Descripcion: Esta interrupcion se divide en 4 subrunitas:
                        ; PTH0: Inicializa la hora del reloj
                        ; PTH1: Detiene la alarma
                        ; PTH2: Decrementa el brillo de los display de 7 segmentos
                        ; PTH3: Incrementa el brillo de los display de 7 segmentos
21ef                    PHO_ISR:
21ef b6 10 69                           LDAA CONT_REB
21f2 27 05                              BEQ PHO_ISR_continuar
21f4 1c 02 67 0f                        BSET PIFH,$0F
21f8 0b                                 RTI
21f9                    PHO_ISR_continuar:
21f9 18 0b 01 10 69                     MOVB #1,CONT_REB        ; No entrar de nuevo a la int en un rato
21fe 1e 02 67 01 13                     BRSET PIFH,$01,PTHO
2203 1e 02 67 02 2f                     BRSET PIFH,$02,PTH1
2208 1e 02 67 04 3d                     BRSET PIFH,$04,PTH2
220d 1e 02 67 08 49                     BRSET PIFH,$08,PTH3
2212 1c 02 67 0f                        BSET PIFH,$0F
2216                    PTHO:
2216 1c 02 67 01                BSET PIFH,$01        ; Desactivando interrupcion
221a 1c 10 01 08                Bset BANDERAS,$08    ; Activa la alarma
221e 4c e2 d0                   BSET IBCR,%11010000  ; Activa modulo, interrupcion,pone a transmitir
2221 18 0b 1f 00 e1             MOVB #$1F,IBFD       ; Del calculo de la tabla
2226 18 0c 10 27 00 e4          MOVB Dir_WR,IBDR     ; Direccion de escritura del RTC
222c 1d 10 01 01                BCLR BANDERAS,$01    ; RTC_RW = 0
2230 79 10 26                   CLR Index_RTC
2233 4c e2 20                   BSET IBCR,%00100000  ; START
2236 0b                         RTI
                        
                        
2237                    PTH1:
2237 1d 10 01 08                Bclr BANDERAS,$08    ; desactiva la alarma
223b 4d 40 20                   BCLR TIOS,$20   ; Desactiva interrupcion de OC5
223e 1d 10 01 10                BCLR BANDERAS,$10       ; Para encender leds
2242 79 10 0c                   CLR LEDS        ; Borra los leds
2245 1c 02 67 02                BSET PIFH,$02     ; Desactivando interrupcion
2249 0b                         RTI
                        
                        
224a                    PTH2:
224a b6 10 02                   LDAA BRILLO        ; sumando 5 al brillo si no es 100
224d 81 64                      CMPA #100
224f 24 05                      BHS PTH2_final
2251 8b 05                      ADDA #5
2253 7a 10 02                   STAA BRILLO
2256                    PTH2_final:
2256 1c 02 67 04                BSET PIFH,$04     ; Desactivando interrupcion
225a 0b                         RTI
                        
                        
225b                    PTH3:
225b f7 10 02                   TST BRILLO       ; restando 5 a brillo si no es 0
225e 23 08                      BLS PTH3_fin
2260 b6 10 02                   LDAA BRILLO
2263 80 05                      SUBA #5
2265 7a 10 02                   STAA BRILLO
2268                    PTH3_fin:
2268 1c 02 67 08                BSET PIFH,$08     ; Desactivando interrupcion
226c 0b                         RTI
                        
                        
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION OC4_ISR
                        ;*******************************************************************************
                        ;Descripcion: Esta interrupcion realiza toda la logica para que funcionen los,
                        ; 4 displa de 7 segmentos y los leds a la vez. Para informacion mas detallada
                        ; ver el enunciado de la tarea. Ademas de que llama a PATRON_LEDS si la alarma
                        ; esta activada
226d                    OC4_ISR:
226d ce 10 08                   LDX #DISP1
2270 86 64                      LDAA #100                 ;Verificando si el contador de tics ya
2272 b1 10 04                   CMPA CONT_TICKS            ; llego a 125.
2275 27 05                      BEQ OC4_ISR_tic_maximo
2277 72 10 04                   INC CONT_TICKS             ; Iincrementando contador de tics
227a 20 3a                      BRA OC4_ISR_continuar1
227c                    OC4_ISR_tic_maximo:               ; Se debe cambiar de display
227c 79 10 04                   CLR CONT_TICKS
227f 72 10 03                   INC CONT_DIG
2282 f6 10 03                   LDAB CONT_DIG
2285 c1 05                      CMPB #5                   ; Si contador de digito se sale del rango se resetea
2287 26 03                      BNE Continuar
2289 79 10 03                   clr CONT_DIG
228c                    Continuar:
228c f6 10 03                   LDAB CONT_DIG             ; Si el digito son los leds, se encienden
228f c1 04                      CMPB #4
2291 27 0b                      BEQ encender_led
2293 18 0d e5 00 01             MOVB B,X,PORTB                ; Mandando datos al display
2298 1c 02 68 02                BSET PTJ,$02                  ; apagando leds
229c 20 0a                      BRA continuar2
229e                    encender_led:                        ; encendiendo leds
229e 18 0c 10 0c 00 01          MOVB LEDS,PORTB
22a4 1d 02 68 02                BCLR PTJ,$02                 ;encendiendo leds
22a8                    continuar2:
22a8 86 f7                      LDAA #$F7                 ; Calculando cual display se debe encender
22aa f6 10 03                   LDAB CONT_DIG
22ad                    OC4_ISR_loop_1:
22ad 27 04                      BEQ OC4_ISR_fin_loop1
22af 44                         LSRA                      ; Se desplaza el 0 para ver cual display se enciende
22b0 53                         DECB
22b1 20 fa                      BRA OC4_ISR_loop_1
22b3                    OC4_ISR_fin_loop1:
22b3 7a 02 58                   STAA PTP                  ; Guardando resultado obtenido
22b6                    OC4_ISR_continuar1:
22b6 86 64                      LDAA #100                 ; Calculando cuando apagar el display
22b8 b0 10 02                   SUBA BRILLO
22bb 7a 10 05                   STAA DT
22be b1 10 04                   CMPA CONT_TICKS
22c1 26 09                      BNE OC4_ISR_continuar2
22c3 18 0b ff 02 58             MOVB #$FF,PTP             ; Se apaga el display
22c8 1c 02 68 02                BSET PTJ,$02              ; disable leds
22cc                    OC4_ISR_continuar2:
22cc fc 10 17                   LDD CONT_7SEG                 ; Calculando si ya pasaron 100ms
22cf 8c 13 88                   CPD #5000
22d2 27 08                      BEQ OC4_ISR_llamar
22d4 c3 00 01                   ADDD #1                       ; sumando 1 a CONT_7SEG
22d7 7c 10 17                   STD CONT_7SEG                 ; Guaradndolo
22da 20 0c                      BRA OC4_ISR_continuar3
22dc                    OC4_ISR_llamar:
22dc 18 03 00 00 10 17          MOVW #0,CONT_7SEG
22e2 16 23 93                   JSR PATRON_LEDS
22e5 16 21 71                   JSR BCD_7SEG
22e8                    OC4_ISR_continuar3:                    ; Decrementando contador de delay si no es 0
22e8 f7 10 19                   TST CONT_DELAY
22eb 27 03                      BEQ OC4_ISR_retornar
22ed 73 10 19                   DEC CONT_DELAY
22f0                    OC4_ISR_retornar:
22f0 dc 44                      LDD TCNT                       ; Guardando en TC4 la siguiente interrupcion
22f2 c3 01 e0                   ADDD #480
22f5 5c 58                      STD TC4
22f7 0b                         RTI
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION OC5_ISR
                        ;*******************************************************************************
                        ;Descripcion: Esta interrupcion hace toogle en la salida del OC5 con la finalidad
                        ; de generar un sonido de alarma.
                        
22f8                    OC5_ISR:
22f8 dc 44                      LDD TCNT                       ; Guardando en TC4 la siguiente interrupcion
22fa c3 00 0a                   ADDD #10
22fd 5c 5a                      STD TC5
22ff 0b                         RTI
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        
                        ;*******************************************************************************
                        ;                                INTERRUPCION IIC_ISR
                        ;*******************************************************************************
                        ; DESCRIPCION: Esta interrupcion se encarga de atender los llamados de las
                        ; comunicaciones entre el RTC y el microprocesador.
2300                    IIC_ISR:
2300 1f 10 01 01 07             BRCLR BANDERAS,$01,IIC_ISR_WRITE_RTC
2305 16 23 45                   JSR READ_RTC
2308 4c e3 02                   BSET IBSR,$02  ;Borra bandera interrupcion
230b 0b                         RTI
230c                    IIC_ISR_WRITE_RTC:
230c 16 23 13                   JSR WRITE_RTC
230f 4c e3 02                   BSET IBSR,$02  ;Borra bandera interrupcion
2312 0b                         RTI
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        ;*******************************************************************************
                        ;                                SUBRUTINA WRITE_RTC
                        ;*******************************************************************************
                        ; DESCRIPCION: Esta subrutina se encarga de escribir el contenido de T_Write_RTC
                        ; en el RTC mediante varios ciclos de interrupciones.
2313                    WRITE_RTC:
2313 f7 10 26                   TST INDEX_RTC
2316 27 20                      BEQ WRITE_RTC_primer_dato
2318 b6 10 26                   LDAA INDEX_RTC  ;Despues de enviar el word adress
231b 43                         DECA    ; Por el primer ciclo en que se envia WORD_adress
231c ce 10 30                   LDX #T_Write_RTC
231f 18 0d e4 00 e4             MOVB A,X,IBDR   ;Poniendo los datos para mandarlos al RTC
2324 b6 10 26                   LDAA Index_RTC
2327 81 08                      CMPA #8
2329 27 05                      BEQ WRITE_RTC_ult_dato
232b 72 10 26                   INC INDEX_RTC
232e 20 11                      BRA WRITE_RTC_retornar
2330                    WRITE_RTC_ult_dato:
2330 79 10 26                   CLR INDEX_RTC   ; Borrando index
2333 4d e2 20                   BCLR IBCR,$20   ; MS/SL = 0, SE;AL DE STOP
2336 20 09                      BRA WRITE_RTC_retornar
2338                    WRITE_RTC_primer_dato:
2338 18 0c 10 29 00 e4          MOVB Dir_Seg,IBDR  ;Direccion de los segundos
233e 72 10 26                   INC INDEX_RTC
2341                    WRITE_RTC_retornar:
2341 4c e2 10                   BSET IBCR,$10   ; Transmitir
2344 3d                         RTS
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                        
                        
                        
                        ;*******************************************************************************
                        ;                                SUBRUTINA READ_RTC
                        ;*******************************************************************************
                        ; DESCRIPCION: Esta subrutina se encarga de leer lo que manda el RTC en distintas
                        ; interrupciones y lo guarda en la variable T_Read_RTC
2345                    READ_RTC:
2345 b6 10 26                   LDAA Index_RTC
2348 72 10 26                   INC Index_RTC
234b 81 00                      CMPA #0
234d 27 1f                      BEQ READ_RTC_primer_dato
234f 81 01                      CMPA #1
2351 27 22                      BEQ READ_RTC_segundo_dato
2353 81 02                      CMPA #2
2355 27 28                      BEQ READ_RTC_tercer_dato
2357 81 09                      CMPA #9
2359 27 2d                      BEQ READ_RTC_ultimo_dato
235b 81 08                      CMPA #8
235d 26 03                      BNE READ_RTC_no_es_penultimo_dato
235f 4c e2 08                   BSET IBCR,$08
2362                    READ_RTC_no_es_penultimo_dato:
2362 ce 10 40                   LDX #T_Read_RTC
2365 43                         DECA              ; Por el desfase de los anteriores 3 ciclos
2366 43                         DECA
2367 43                         DECA
2368 18 09 e4 00 e4             MOVB IBDR,A,X    ; Guardando dato en donde debe ir
236d 3d                         RTS
236e                    READ_RTC_primer_dato:
236e 18 0c 10 29 00 e4          MOVB DIR_SEG,IBDR         ;Envia la direccion de los segundos
2374 3d                         RTS
2375                    READ_RTC_segundo_dato:
2375 4c e2 04                   BSET IBCR,$04             ; Reteated started
2378 18 0c 10 28 00 e4          MOVB DIR_RD,IBDR          ; Envia direccion de lectura
237e 3d                         RTS
237f                    READ_RTC_tercer_dato:
237f 4d e2 0c                   BCLR IBCR,$0C             ; Borra repeated started y TXAK
2382 4d e2 10                   BCLR IBCR,$10             ; Pone en modo recepcion
2385 d6 e4                      LDAB IBDR                 ; dummy para mandar ciclos al slave
2387 3d                         RTS
2388                    READ_RTC_ultimo_dato:
2388 4d e2 28                   BCLR IBCR,$28             ; Pone senal stop y txak en 0
238b 4c e2 10                   BSET IBCR,$10             ; Pone como transmisor para sig ciclo
238e 79 10 26                   CLR Index_RTC             ; Borra indice por si acaso
                        
2391 20 cf                      BRA READ_RTC_no_es_penultimo_dato ; Para mandarlo a guardar el dato
                        
                        
                        ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---
                                
                                
                        ;*******************************************************************************
                        ;                                SUBRUTINA PATRON_LEDS
                        ;*******************************************************************************
                        ;DESCRIPCION: Se encarga de barrer los leds de izq a derecha si la alarma esta
                        ; activada
2393                    PATRON_LEDS:
2393 1f 10 01 10 0d             BRCLR BANDERAS,$10,PATRON_LEDS_TERMINAR
2398 b6 10 0c                   LDAA LEDS
239b 27 04                      BEQ PATRON_LEDS_RESET
239d 74 10 0c                   LSR LEDS
23a0 3d                         RTS
23a1                    PATRON_LEDS_RESET:
23a1 1c 10 0c 80                BSET LEDS,$80
23a5                    PATRON_LEDS_TERMINAR:
23a5 3d                         RTS
                         ;---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---

Executed: Tue Dec 03 16:10:58 2019
Total cycles: 1167, Total bytes: 1010
Total errors: 0, Total warnings: 0
